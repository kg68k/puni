        - FP CALL MANUAL -

==============================================================================

・日本語 FP コール一覧

 1  かな漢字変換モードの設定
 2  かな漢字変換モードの収得
 3  フラッシュモードの設定
 4  フラッシュモードの収得
 5  入力モードの設定
 6  入力モードの収得
 7  かな漢字変換モード固定状態の設定
 8  かな漢字変換モード固定状態の収得
 9  JIS/区点モードの設定
10  JIS/区点モードの収得
11  学習モードの設定
12  学習モードの収得
13  文字列変換:半角→全角
14  文字列変換:全角→半角
15  文字列変換:半角→全角片仮名(ローマ字変換)
16  文字列変換:半角→全角平仮名(ローマ字変換)
17  文字列変換:全角片仮名→全角平仮名
18  文字列変換:全角平仮名→全角片仮名
19  一括変換及び逐次先読みの最初の変換候補群と後続文節の作成
20  候補群ブロック内の前候補の収得
21  候補群ブロック内の次候補の収得
22  前候補ブロックの作成
23  次候補ブロックの作成
24  全体確定
25  先頭文節の確定
26  逐次変換及び先読み変換の為の文字列の追加
27  逐次変換及び先読み変換の為の文字の削除
28  辞書のオープン
29  辞書のクローズ
30  辞書への単語登録
31  辞書からの単語削除
32  辞書ファイル名の登録
33  先頭文節を1文字長くして再変換
34  先頭文節を1文字短くして再変換
35  前文節への移動
36  次文節への移動
37  先頭文節の片仮名変換
38  先頭文節の平仮名変換
39  先頭文節の半角変換
40  先頭文節の全角変換
41  使用中の辞書ファイル名の収得
42  不明

50  日本語 FP のバージョンの収得
51  メイン辞書のバージョンの収得
52  日本語 FP の再設定
53  リアルタイムキー入力
54  エコーモードの設定
55  エコーモードの収得
56  エコーモードの固定状態の設定

60  アクセサリを登録する
61  アクセサリを削除する
62  文字列を属性付加文字列に変換する
63  属性付加文字列中の任意文字の属性を変更する

注意
    　50～56 は日本語 FP バージョン 2.00 以上、42,60～63 はバージョン 3.00 以
    上でサポートされる。未対応のバージョンで使用した場合は -1 が返る。

備考
    　これらのコール番号はスタックにロングワードサイズで積むが、ASK68K version
    3.02 では上位ワードは無視され、下位ワードのみが参照される。

==============================================================================

・文法コード表

1       動詞カ行五段活用        16      サ変複合名詞
2        〃 ガ行〃              17      名詞
3        〃 サ行〃              18      単漢字
4        〃 タ行〃              19      人名(性)
5        〃 ナ行〃              20      人名(名)
6        〃 バ行〃              21      地名
7        〃 マ行〃              22      団体名
8        〃 ラ行〃              23      物の名称
9        〃 ワ行〃              24      数詞
10       〃 サ行変格活用        25      数字
11       〃 カ行〃              26      接尾語
12       〃 一段活用            27      感動詞
13      形容詞                  28      接続詞
14      形容動詞                29      副詞
15      形容動詞複合名詞        30      連体詞

==============================================================================

・文字列変換ファンクションの使用方法

  13～18 の機能は日本語 FP のモードにかかわらず、かな漢字変換用サブルーチン
を呼び出して文字列の変換を行う。

  19～27,33～40 の機能はかな漢字変換モジュールのサブルーチンを呼び出して、かな
漢字変換を行う。
  これらのコールを使用するアプリケーションは、日本語 FP を通常入力モードに設定
し、モード固定状態にして自らキー入力を受け付け、入力文字列を 13～18 のコールで
全角平仮名文字列に変換した後、これらのサブルーチンを呼び出さなければならない。
  入力文字列は全角平仮名だけで、それ以外の文字は漢字変換の対象にならない。

  26,27 は遂次変換及び辞書先読み一括変換モードの為の機能で、19 に対応する。
19 では渡された全角平仮名文字列そのものを変換対象とするが、26,27 では渡された
文字列をバッファに追加又は削除し、辞書を読んで再変換する。
  変換された侯補と後続文節の取り出しには 20～23,33,34 を用い、確定には 24,25
を使う。確定された読みは変換用バッファから除かれる。
  遂次変換と辞書先読み一括変換の区別は、アプリケーションの表示タイミングによる。
  19 をコールすると一括・先読み・遂次のいずれの場合も侯補選択の状態になる。各
文節の侯補を選択し、必要なら 35,36 で文節を前後に動かし、最後に 24 で全体を確
定する。この時全文節が出力される。文節の侯補を最初から順に決定していく場合でも、
最後に 24 をコールすること。

  37～40 の機能は侯補を選択するのと同じタイミングで使用する。これらの機能が呼
ばれると、最初の侯補群が作成され、片仮名/平仮名/半角/全角の侯補が最初になる。

  32,41 の機能を日本語 FP バージョン 3.00 で使用する場合、サブ辞書が削除されて
いるので、引数にサブ辞書名を渡す必要はない。

==============================================================================

 1      かな漢字変換モードの設定

引数    MODE    かな漢字変換モード
        MODE =  0       かな漢字変換なし(通常の入力モード)
                1       一括変換(辞書の先読みなし)
                2       〃      (〃          あり)
                3       遂次変換

返値    d0.l =  0       正常終了
                1       ドライブの準備が出来ていない
                2       モードの値が異常

        かな漢字変換モードを設定する。
        MODE = 1～3 の時画面最下行にかな漢字変換ウィンドウが表示され、以後のキ
        ー入力は変換ウィンドウで処理される。
        MODE = 0 の時変換ウィンドウがクローズされる。

        move.l  MODE,-(sp)
        move.l  #1,-(sp)
        DOS     _KNJCTRL
        addq.l  #8,sp

==============================================================================

 2      かな漢字変換モードの収得

返値    かな漢字変換モード(0～3)

        かな漢字変換モードを収得する。ただし、かな漢字変換なしのモードの時はキ
        ー操作により変換モードにした時の状態を返す。よって、0 を返すことはない。
        変換モードか否かは８番のコールの返値を引数にして７番のコールを呼び出す
        ことで判別できる。

        move.l  #2,-(sp)
        DOS     _KNJCTRL
        addq.l  #4,sp

==============================================================================

 3      フラッシュモードの設定

引数    MODE    フラッシュモード(0:フラッシュモード解除 1:設定)

返値    d0.l =  0       正常終了
                2       モードの値が異常

        フラッシュつきキー入力時に日本語 FP のバッファをクリアするかを設定する。

        move.l  MODE,-(sp)
        move.l  #3,-(sp)
        DOS     _KNJCTRL
        addq.l  #8,sp

==============================================================================

 4      フラッシュモードの収得

返値    フラッシュモード(0,1)

        フラッシュモードを収得する。

        move.l  #4,-(sp)
        DOS     _KNJCTRL
        addq.l  #4,sp

==============================================================================

 5      入力モードの設定

引数    MODE    入力モード
                bit 2   0:半角          1:全角
                bit 1   0:片仮名        1:平仮名
                bit 0   0:通常モード    1:ローマ字変換

返値    d0.l =  0       正常終了
                2       モードの値が異常

        入力モードを設定する。

        move.l  MODE,-(sp)
        move.l  #5,-(sp)
        DOS     _KNJCTRL
        addq.l  #8,sp

==============================================================================

 6      入力モードの収得

返値    入力モード

        入力モードを収得する。

        move.l  #6,-(sp)
        DOS     _KNJCTRL
        addq.l  #4,sp

==============================================================================

 7      かな漢字変換モード固定状態の設定

引数    MODE    固定モード(0:固定 1:固定解除)

返値    d0.l =  0       正常終了
                2       モードの値が異常

        かな漢字変換モード及び入力モードをキーボードから変更可能にするかを設定
        する。かな漢字変換モードになっている時は、モードの指定に関わらず常に失
        敗し 2 が返る。

        move.l  MODE,-(sp)
        move.l  #7,-(sp)
        DOS     _KNJCTRL
        addq.l  #8,sp

==============================================================================

 8      かな漢字変換モード固定状態の収得

返値    固定モード(0,1)

        かな漢字変換モード固定状態を収得する。

        move.l  #8,-(sp)
        DOS     _KNJCTRL
        addq.l  #4,sp

==============================================================================

 9     JIS/区点モードの設定

引数    MODE    JIS/区点モード
        MODE =  0       JIS/Shift-JIS モード
                1       区点モード

返値    d0.l =  0       正常終了
                2       モードの値が異常

        かな漢字変換モードでのコード入力のコード体系を設定する。

        move.l  MODE,-(sp)
        move.l  #9,-(sp)
        DOS     _KNJCTRL
        addq.l  #8,sp

==============================================================================

10      JIS/区点モードの収得

返値    JIS/区点モード(0,1)

        コード入力のコード体系を収得する。

        move.l  #10,-(sp)
        DOS     _KNJCTRL
        addq.l  #4,sp

==============================================================================

11      学習モードの設定

引数    MODE    学習モード
        MODE =  0       一時学習モード(メモリ学習)
                1       辞書更新学習モード(ディスク学習)

返値    d0.l =  0       正常終了
                2       モードの値が異常

        学習モードを設定する。

        move.l  MODE,-(sp)
        move.l  #11,-(sp)
        DOS     _KNJCTRL
        addq.l  #8,sp

==============================================================================

12      学習モードの収得

返値    学習モード(0,1)

        学習モードを収得する。

        move.l  #12,-(sp)
        DOS     _KNJCTRL
        addq.l  #4,sp

==============================================================================

13      文字列変換:半角→全角

引数    SOURCE  変換前の文字列格納番地
        DEST    変換後の文字列格納番地

返値    d0.l =  0       正常終了
                neq     変換エラーが起きた文字のバッファ先頭からの文字数
                        (半角文字計算)

        半角文字列を全角文字列に変換する。

        pea     (DEST)
        pea     (SOURCE)
        move.l  #13,-(sp)
        DOS     _KNJCTRL
        lea     (12,sp),sp

==============================================================================

14      文字列変換:全角→半角

引数    SOURCE  変換前の文字列格納番地
        DEST    変換後の文字列格納番地

返値    d0.l =  0       正常終了
                neq     変換エラーが起きた文字のバッファ先頭からの文字数
                        (半角文字計算)

        全角文字列を半角文字列に変換する。

        pea     (DEST)
        pea     (SOURCE)
        move.l  #14,-(sp)
        DOS     _KNJCTRL
        lea     (12,sp),sp

==============================================================================

15      文字列変換:半角→全角片仮名(ローマ字変換)

引数    SOURCE  変換前の文字列格納番地
        DEST    変換後の文字列格納番地

返値    d0.l =  0       正常終了
                neq     変換エラーが起きた文字のバッファ先頭からの文字数
                        (半角文字計算)

        半角文字列を全角片仮名文字列にローマ字変換する。

        pea     (DEST)
        pea     (SOURCE)
        move.l  #15,-(sp)
        DOS     _KNJCTRL
        lea     (12,sp),sp

==============================================================================

16      文字列変換:半角→全角平仮名(ローマ字変換)

引数    SOURCE  変換前の文字列格納番地
        DEST    変換後の文字列格納番地

返値    d0.l =  0       正常終了
                neq     変換エラーが起きた文字のバッファ先頭からの文字数
                        (半角文字計算)

        半角文字列を全角平仮名文字列にローマ字変換する。

        pea     (DEST)
        pea     (SOURCE)
        move.l  #16,-(sp)
        DOS     _KNJCTRL
        lea     (12,sp),sp

==============================================================================

17      文字列変換:全角片仮名→全角平仮名

引数    SOURCE  変換前の文字列格納番地
        DEST    変換後の文字列格納番地

返値    d0.l =  0       正常終了
                neq     変換エラーが起きた文字のバッファ先頭からの文字数
                        (半角文字計算)

        全角片仮名文字列を全角平仮名文字列に変換する。

        pea     (DEST)
        pea     (SOURCE)
        move.l  #17,-(sp)
        DOS     _KNJCTRL
        lea     (12,sp),sp

==============================================================================

18      文字列変換:全角平仮名→全角片仮名

引数    SOURCE  変換前の文字列格納番地
        DEST    変換後の文字列格納番地

返値    d0.l =  0       正常終了
                neq     変換エラーが起きた文字のバッファ先頭からの文字数
                        (半角文字計算)

        全角平仮名文字列を全角片仮名文字列に変換する。

        pea     (DEST)
        pea     (SOURCE)
        move.l  #18,-(sp)
        DOS     _KNJCTRL
        lea     (12,sp),sp

==============================================================================

19      一括変換及び逐次先読みの最初の変換候補群と後続文節の作成

引数    BUF     変換する全角平仮名文字列のアドレス
        KOUHO   最初の侯補の格納バッファ
        KOUZOKU 後続文節の格納バッファ

返値    侯補数

        最初の変換候補群と後続文節を作成する。
        BUF = 0 の時遂次先読みと解釈され、既に送られている文字列を変換する。

        pea     (KOUZOKU)
        pea     (KOUHO)
        pea     (BUF)
        move.l  #19,-(sp)
        DOS     _KNJCTRL
        lea     (16,sp),sp

==============================================================================

20      候補群ブロック内の前候補の収得

引数    KOUHO   侯補の格納バッファ
        KOUZOKU 後続文節の格納バッファ

返値    d0.l =  0       侯補なし
                neq     侯補番号

        候補群ブロックの中で前候補となる語の侯補番号を収得する。

        pea     (KOUZOKU)
        pea     (KOUHO)
        move.l  #20,-(sp)
        DOS     _KNJCTRL
        lea     (12,sp),sp

==============================================================================

21      候補群ブロック内の次候補の収得

引数    KOUHO   侯補の格納バッファ
        KOUZOKU 後続文節の格納バッファ

返値    d0.l =  0       侯補なし
                neq     侯補番号

        候補群ブロックの中で次候補となる語の侯補番号を収得する。

        pea     (KOUZOKU)
        pea     (KOUHO)
        move.l  #21,-(sp)
        DOS     _KNJCTRL
        lea     (12,sp),sp

==============================================================================

22      前候補ブロックの作成

引数    KOUHO   最初の侯補の格納バッファ
        KOUZOKU 後続文節の格納バッファ

返値    d0.l =  0       侯補なし
                neq     侯補番号

        前侯補ブロックを作成する。

        pea     (KOUZOKU)
        pea     (KOUHO)
        move.l  #22,-(sp)
        DOS     _KNJCTRL
        lea     (12,sp),sp

==============================================================================

23      次候補ブロックの作成

引数    KOUHO   最初の侯補の格納バッファ
        KOUZOKU 後続文節の格納バッファ

返値    d0.l =  0       侯補なし
                neq     侯補番号

        次侯補ブロックを作成する。

        pea     (KOUZOKU)
        pea     (KOUHO)
        move.l  #23,-(sp)
        DOS     _KNJCTRL
        lea     (12,sp),sp

==============================================================================

24      全体確定

引数    BUF     変換後の文字列の格納バッファ

返値    d0.l =  0       正常終了
                neq     異常終了

        全体を確定する。変換操作の最後にこの機能を実行する。
        BUF には最初から最後までの全ての文節が格納されている。
        確定した文節の学習はこの時点で記憶される。

        pea     (BUF)
        move.l  #24,-(sp)
        DOS     _KNJCTRL
        addq.l  #8,sp

==============================================================================

25      先頭文節の確定

引数    NO      侯補ブロック内での番号(1 以上)
        BUF     確定する先頭文節の格納バッファ
        KOUHO   次文節の最初の侯補の格納バッファ
        KOUZOKU 次文節に続く後続文節の格納バッファ
        NKOUHO  次文節の侯補数の格納バッファ(結果は 16bit)

返値    d0.l =  0       侯補番号が不正
                neq     確定文節の読みの長さ(半角換算値)

        先頭の文節を確定する。

        pea     (NKOUHO)
        pea     (KOUZOKU)
        pea     (KOUHO)
        pea     (BUF)
        move.l  NO,-(sp)
        move.l  #25,-(sp)
        DOS     _KNJCTRL
        lea     (24,sp),sp

==============================================================================

26      逐次変換及び先読み変換の為の文字列の追加

引数    BUF     追加する文字列のアドレス
        RETBUF  途中の変換文字列を格納するバッファ
                (ただし、先読みモードでは BUF の内容がそのまま複写される)
        MODE    変換タイプのモード(0:遂次変換 1:先読み変換)
                遂次変換と先読み変換の違いは、漢字に変換した中間結果を返すかど
                うかだけ。

返値    d0.l =  0       正常終了
                neq     異常終了(文字列追加のオーバーフロー等)

        文字列を追加し、再変換する。
        BUF = 0 の時遂次先読みが初期化され、過去に追加された文字列はキャンセル
        される。

        move.l  MODE,-(sp)
        pea     (RETBUF)
        pea     (BUF)
        move.l  #26,-(sp)
        DOS     _KNJCTRL
        lea     (16,sp),sp

==============================================================================

27      逐次変換及び先読み変換の為の文字の削除

引数    N       最後から削除する文字列のバイト数
        RETBUF  途中の変換文字列を格納するバッファ
                (ただし、先読みモードでは現在の読みの内容がそのまま複写される)
        MODE    変換タイプのモード(0:遂次変換 1:先読み変換)

返値    d0.l =  0       正常終了
                neq     異常終了

        文字列を削除し、再変換する。

        move.l  MODE,-(sp)
        pea     (RETBUF)
        move.l  N,-(sp)
        move.l  #27,-(sp)
        DOS     _KNJCTRL
        lea     (16,sp),sp

==============================================================================

28      辞書のオープン

返値    d0.l =  0       正常終了
                neq     異常終了(d0.l = 1 の時、ドライブの準備が出来ていない)

        辞書ファイルをオープンする。
        これにより、FP コール 19～27,30,31,33～40 が動作するようになる。

        move.l  #28,-(sp)
        DOS     _KNJCTRL
        addq.l  #4,sp

==============================================================================

29      辞書のクローズ

返値    d0.l =  0       正常終了
                neq     異常終了

        辞書ファイルをクローズする。
        以後 FP コール 19～27,30,31,33～40 は動作しない。

        move.l  #29,-(sp)
        DOS     _KNJCTRL
        addq.l  #4,sp

==============================================================================

30      辞書への単語登録

引数    FD      辞書の種類(0:メイン辞書 1:サブ辞書)
        YOMI    登録する単語の読み(全角平仮名、英数字)
        TANGO   登録する単語
        SYN     文法コード(1～30)

返値    d0.l =  0       正常終了
                neq     異常終了(登録失敗)
                1       辞書の種類が不適当
                2       文法コード〃
                3       読み      〃
                4       登録するページがない

        指定した辞書に指定した単語を文法コードつきで登録する。
        実行前にかな漢字変換モードをロックしておくこと。

        ※ ASK68K ver 3.02 で単語を登録する場合、FEP を終了し、変換モードをロ
          ック後、辞書をオープンしてから登録しなければならないらしい。

        move.l  SYN,-(sp)
        pea     (TANGO)
        pea     (YOMI)
        move.l  #FD,-(sp)
        move.l  #30,-(sp)
        DOS     _KNJCTRL
        lea     (20,sp),sp

==============================================================================

31      辞書からの単語削除

引数    FD      辞書の種類(0:メイン辞書 1:サブ辞書)
        YOMI    削除する単語の読み(全角平仮名、英数字)
        TANGO   削除する単語
        SYN     文法コード(1～30)

返値    d0.l =  0       正常終了
                neq     異常終了(削除失敗)
                -1      削除すべき単語が辞書にない
                1       辞書の種類が不適当
                2       文法コード〃
                3       読み      〃
                4       辞書がない

        指定した辞書から指定した単語を文法コード参照で削除する。
        実行前にかな漢字変換モードをロックしておくこと。

        move.l  SYN,-(sp)
        pea     (TANGO)
        pea     (YOMI)
        move.l  #FD,-(sp)
        move.l  #31,-(sp)
        DOS     _KNJCTRL
        lea     (20,sp),sp

==============================================================================

32      辞書ファイル名の登録

引数    MAINDIC メイン辞書名
        SUBDIC  サブ辞書名

返値    d0.l =  0       正常終了
                1       ドライブの準備が出来ていない

        メイン辞書及びサブ辞書のファイル名を登録する。
        日本語 FP バージョン 3.00 以上では、サブ辞書名を渡す必要はない。

        ※ ASK68K ver 3.02 の場合、辞書ファイルを変更したら一度 FEP を終了して
          再起動しないと有効にならないらしい。

==============================================================================

33      先頭文節を1文字長くして再変換

引数    KOUHO   最初の侯補の格納バッファ
        KOUZOKU 後続文節の格納バッファ

返値    侯補数

        先頭の文節を読みを1文字文だけ長くして再変換する。

        pea     (KOUZOKU)
        pea     (KOUHO)
        move.l  #33,-(sp)
        DOS     _KNJCTRL
        lea     (12,sp),sp

==============================================================================

34      先頭文節を1文字短くして再変換

引数    KOUHO   最初の侯補の格納バッファ
        KOUZOKU 後続文節の格納バッファ

返値    侯補数

        先頭の文節を読みを1文字文だけ短くして再変換する。

        pea     (KOUZOKU)
        pea     (KOUHO)
        move.l  #34,-(sp)
        DOS     _KNJCTRL
        lea     (12,sp),sp

==============================================================================

35      前文節への移動

引数    KOUHO   前文節の最初の侯補の格納バッファ
        KOUZOKU 前文節に続く文節の格納バッファ

返値    d0.l =  0       前文節がない
                neq     侯補数

        前の文節に移動する。

        pea     (KOUZOKU)
        pea     (KOUHO)
        move.l  #35,-(sp)
        DOS     _KNJCTRL
        lea     (12,sp),sp

==============================================================================

36      次文節への移動

引数    KOUHO   次文節の最初の侯補の格納バッファ
        KOUZOKU 次文節に続く文節の格納バッファ

返値    d0.l =  0       次文節がない
                neq     侯補数

        次の文節に移動する。

        pea     (KOUZOKU)
        pea     (KOUHO)
        move.l  #36,-(sp)
        DOS     _KNJCTRL
        lea     (12,sp),sp

==============================================================================

37      先頭文節の片仮名変換

引数    KOUHO   侯補の格納バッファ
        KOUZOKU 後続文節の格納バッファ

返値    d0.l =  0       正常終了
                neq     異常終了

        先頭の文節を片仮名に変換する。

        pea     (KOUZOKU)
        pea     (KOUHO)
        move.l  #36,-(sp)
        DOS     _KNJCTRL
        lea     (12,sp),sp

==============================================================================

38      先頭文節の平仮名変換

引数    KOUHO   侯補の格納バッファ
        KOUZOKU 後続文節の格納バッファ

返値    d0.l =  0       正常終了
                neq     異常終了

        先頭の文節を平仮名に変換する。

        pea     (KOUZOKU)
        pea     (KOUHO)
        move.l  #38,-(sp)
        DOS     _KNJCTRL
        lea     (12,sp),sp

==============================================================================

39      先頭文節の半角変換

引数    KOUHO   侯補の格納バッファ
        KOUZOKU 後続文節の格納バッファ

返値    d0.l =  0       正常終了
                neq     異常終了

        先頭の文節を半角文字に変換する。

        pea     (KOUZOKU)
        pea     (KOUHO)
        move.l  #39,-(sp)
        DOS     _KNJCTRL
        lea     (12,sp),sp

==============================================================================

40      先頭文節の全角変換

引数    KOUHO   侯補の格納バッファ
        KOUZOKU 後続文節の格納バッファ

返値    d0.l =  0       正常終了
                neq     異常終了

        先頭の文節を全角文字に変換する。

        pea     (KOUZOKU)
        pea     (KOUHO)
        move.l  #40,-(sp)
        DOS     _KNJCTRL
        lea     (12,sp),sp

==============================================================================

41      使用中の辞書ファイル名の収得

引数    MAINDIC メイン辞書名の格納バッファ
        SUBDIC  サブ辞書名の格納バッファ

返値    d0.l =  0       正常終了
                neq     異常終了

        使用中のメイン辞書及びサブ辞書のファイル名を収得する。
        日本語 FP バージョン 3.00 以上でも、サブ辞書名の格納バッファを渡す必要
        があるので注意すること(メイン辞書と同じファイル名が格納される)。

==============================================================================

42      不明

返値    常に 0 を返す。

        何もしない。

==============================================================================

50      日本語 FP のバージョンの収得

返値    d0.l =  0       異常終了
                -1      バージョン 2.00 以前
                plus    バージョン番号

        日本語 FP のバージョン番号を収得する(d0.l = 201 の時 バージョン 2.01)。

        move.l  #50,-(sp)
        DOS     _KNJCTRL
        addq.l  #4,sp

==============================================================================

51      メイン辞書のバージョンの収得

返値    d0.l =  0       異常終了
                plus    バージョン番号

        使用中のメイン辞書のバージョン番号を収得する。

        move.l  #51,-(sp)
        DOS     _KNJCTRL
        addq.l  #4,sp

==============================================================================

52      日本語 FP の再設定

引数    ENVNAME 環境ファイル名の文字列のアドレス

返値    d0.l =  0       正常終了
                neq     異常終了

        指定された環境ファイルを読み込み、内容に従って日本語 FP の環境を再設定
        する。

        pea     (ENVNAME)
        move.l  #52,-(sp)
        DOS     _KNJCTRL
        addq.l  #8,sp

==============================================================================

53      リアルタイムキー入力

返値    d0.l =  0       キー入力なし
                neq     入力文字コード

        DOS _INPOUT の CODE = $ff に相当し、キー入力がない場合でも入力待ちを行
        なわない。キーが押されていない時には 0、押されていた時にはその文字コー
        ドが漢字であっても1バイトずつ通知する。
        DOS コールを使わないで漢字入力をしたい時に使用する。

        move.l  #53,-(sp)
        DOS     _KNJCTRL
        addq.l  #4,sp

==============================================================================

54      エコーモードの設定

引数    MODE    モード(0:システムラインモード 1:エコーモード)

返値    d0.l =  0       正常終了
                neq     異常終了

        かな漢字変換の表示を画面の最下行で行なう場合はシステムラインモードを、
        画面のカーソル位置で行なう場合はエコーモードを設定する。

        move.l  MODE,-(sp)
        move.l  #54,-(sp)
        DOS     _KNJCTRL
        addq.l  #8,sp

==============================================================================

55      エコーモードの収得

返値    エコーモード(0,1)

        エコーモードを収得する。

        move.l  #55,-(sp)
        DOS     _KNJCTRL
        addq.l  #4,sp

==============================================================================

56      エコーモードの固定状態の設定

引数    MODE    エコーモード固定指定(0:固定 1:固定解除)

返値    d0.l =  0       正常終了
                2       モードの値が異常

        エコー/システムラインモードをキーボードから変更可能にするかを設定する。

        move.l  MODE,-(sp)
        move.l  #56,-(sp)
        DOS     _KNJCTRL
        addq.l  #8,sp

==============================================================================

60      アクセサリを登録する

引数    ACCDEF  アクセサリ定義構造体のアドレス

返値    アクセサリハンドル(-1 なら登録失敗)

        アクセサリを登録する。

        ※ ASK68K ver 3.02 の場合、アクセサリの最大登録数は 10 個。指定できな
          いキーがある。アクセサリはスーパバイザモードで呼び出されるが、スタッ
          クを大量に消費してはいけない。d0.w は返値らしい。登録後はアクセサリ
          定義構造体は不要(常駐させなくてもよい)。

        pea     (ACCDEF)
        move.l  #60,-(sp)
        DOS     _KNJCTRL
        addq.l  #8,sp

==============================================================================

61      アクセサリを削除する

引数    ACCHANDLE       アクセサリハンドル

返値    d0.l =  0       正常終了
                -1      エラー

        ASK68K 内部にあるテーブルから、アクセサリのエントリを削除する。
        アクセサリは以後呼び出されなくなる。

        move.l  #ACCHANDLE,-(sp)
        move.l  #61,-(sp)
        DOS     _KNJCTRL
        addq.l  #8,sp

==============================================================================

62      文字列を属性付加文字列に変換する

引数    STR     シフト JIS 文字列のアドレス
        MBUF    MEAN 文字列格納バッファ
        KIND    表示属性(0:通常 1:反転)

        ACSII コードとシフト JIS コードからなる文字列を MEAN 文字列に変換して
        バッファに書き込む。

        pea     (STR)
        pea     (MBUF)
        move.l  #KIND,-(sp)
        move.l  #62,-(sp)
        DOS     _KNJCTRL
        lea     (16,sp),sp

==============================================================================

63      属性付加文字列中の任意文字の属性を変更する

        MBUF    MEAN 文字列のバッファ
        LEN     変更する文字数
        KIND    表示属性(0:通常 1:反転)

        MEAN 文字列中の MBUF のアドレスから、LEN で指定された文字分の表示属性
        を変更する。

        move.l  #LEN,-(sp)
        pea     (MBUF)
        move.l  #KIND,-(sp)
        move.l  #62,-(sp)
        DOS     _KNJCTRL
        lea     (16,sp),sp

==============================================================================
