        - IOCS CALL MANUAL -

==============================================================================

・IOCS コール一覧

$00     _B_KEYINP       キーデータの読み込み
$01     _B_KEYSNS       キーの入力検査
$02     _B_SFTSNS       シフトキー状態の収得
$03     _KEY_INIT       入力関係の初期化
$04     _BITSNS         キー状態の収得
$05     _SKEYSET        キー入力の発生
$06     _LEDCTRL        キーボード LED の設定
$07     _LEDSET         キーボード LED をキー入力モードに合わせる
$08     _KEYDLY         キーリピートの開始時間設定
$09     _KEYREP         キーリピートの間隔設定
$0a     (未公開)        OPT.2 によるテレビコントロール許可
$0b     (未公開)        OPT.2 によるテレビコントロール禁止
$0c     _TVCTRL         テレビコントロール
$0d     _LEDMOD         LED モードの設定
$0e     _TGUSEMD        画面の使用状態の設定
$0f     _DEFCHR         外字定義
$10     _CRTMOD         CRT モード設定
$11     _CONTRAST       コントラスト設定
$12     _HSVTORGB       HSV→RGB 変換
$13     _TPALET         テキストパレット設定
$14     _TPALET2        テキストパレット独立設定
$15     _TCOLOR         テキストプレーン指定
$16     _FNTADR         フォントアドレスの収得
$17     _VRAMGET        テキスト VRAM のバイト単位読み込み
$18     _VRAMPUT        テキスト VRAM のバイト単位書き込み
$19     _FNTGET         フォント読み込み
$1a     _TEXTGET        テキスト VRAM のドット単位読み込み
$1b     _TEXTPUT        テキスト VRAM のドット単位書き込み
$1c     _CLIPPUT        テキスト VRAM のドット単位書き込み(クリッピング処理あり)
$1d     _SCROLL         表示座標の設定
$1e     _B_CURON        カーソル点滅の一時停止解除
$1f     _B_CUROFF       カーソル点滅の一時停止
$20     _B_PUTC         文字表示
$21     _B_PRINT        文字列表示
$22     _B_COLOR        表示色設定
$23     _B_LOCATE       カーソル移動
$24     _B_DOWN_S       カーソルを1行下に移動
$25     _B_UP_S         カーソルを1行上に移動
$26     _B_UP           カーソルを指定行数だけ上に移動
$27     _B_DOWN         カーソルを指定行数だけ下に移動
$28     _B_RIGHT        カーソルを指定桁数だけ右に移動
$29     _B_LEFT         カーソルを指定桁数だけ左に移動
$2a     _B_CLR_ST       画面の複数行消去
$2b     _B_ERA_ST       現在行の複数桁消去
$2c     _B_INS          複数行挿入
$2d     _B_DEL          複数行削除
$2e     _B_CONSOL       表示範囲設定
$2f     _B_PUTMES       座標指定文字列表示
$30     _SET232C        RS-232C パラメータ設定
$31     _LOF232C        RS-232C 受信バッファのデータ数を求める
$32     _INP232C        RS-232C 受信データを得る
$33     _ISNS232C       RS-232C 受信データの検査
$34     _OSNS232C       RS-232C データが送信可能か検査する
$35     _OUT232C        RS-232C データ送信
$36     (未公開)        マウスデータ受信時の処理アドレス設定
$37     (未公開)        ESC[> 系エスケープシーケンスの拡張処理アドレス設定
$38     _SETFNTADR      外字フォントアドレス設定
$39     (未公開)        BEEP 音用 PCM のデータ設定
$3a     (未公開)        プリンタパラメータ設定
$3b     _JOYGET         ジョイスティック入力
$3c     _INIT_PRN       プリンタ初期化
$3d     _SNSPRN         プリンタに出力可能か検査する
$3e     _OUTLPT         プリンタ直接出力
$3f     _OUTPRN         プリンタ出力
$40     _B_SEEK         ディスクのシーク
$41     _B_VERIFY       ディスクのベリファイ
$42     _B_READDI       ディスクの診断の為の読み出し
$43     _B_DSKINI       ドライブの初期化
$44     _B_DRVSNS       ドライブの状態検査
$45     _B_WRITE        ディスクへの書き込み
$46     _B_READ         ディスクからの読み込み
$47     _B_RECALI       ディスクのリキャリブレイト
$48     _B_ASSIGN       ハードディスクの代替トラック設定
$49     _B_WRITED       2HD への破損データ書き込み
$4a     _B_READID       2HD の ID 情報の読み出し
$4b     _B_BADFMT       ハードディスクの破損トラックを使用不能にする
$4c     _B_READDL       2HD からの破損データ読み込み
$4d     _B_FORMAT       ディスクのフォーマット
$4e     _B_DRVCHK       2HD ドライブの状態設定
$4f     _B_EJECT        ディスクのイジェクト/シッピング
$50     _DATEBCD        日付データのバイナリ→BCD 変換
$51     _DATESET        日付の設定
$52     _TIMEBCD        時刻データのバイナリ→BCD 変換
$53     _TIMESET        時刻の設定
$54     _DATEGET        日付の読み込み
$55     _DATEBIN        日付データの BCD→バイナリ変換
$56     _TIMEGET        時刻の読み込み
$57     _TIMEBIN        時刻データの BCD→バイナリ変換
$58     _DATECNV        日付データの文字列→バイナリ変換
$59     _TIMECNV        時刻データの文字列→バイナリ変換
$5a     _DATEASC        日付データのバイナリ→文字列変換
$5b     _TIMEASC        時刻データのバイナリ→文字列変換
$5c     _DAYASC         曜日データのバイナリ→文字列変換
$5d     _ALARMMOD       アラーム許可/禁止
$5e     _ALARMSET       アラーム設定
$5f     _ALARMGET       アラームの設定状態を収得
$60     _ADPCMOUT       ADPCM 出力
$61     _ADPCMINP       ADPCM 入力
$62     _ADPCMAOT       ADPCM 出力(アレイチェーン)
$63     _ADPCMAIN       ADPCM 入力(アレイチェーン)
$64     _ADPCMLOT       ADPCM 出力(リンクアレイチェーン)
$65     _ADPCMLIN       ADPCM 入力(リンクアレイチェーン)
$66     _ADPCMSNS       ADPCM 状態検査
$67     _ADPCMMOD       ADPCM 実行制御
$68     _OPMSET         OPM レジスタ設定
$69     _OPMSNS         OPM 状態検査
$6a     _OPMINTST       OPM 割り込み設定
$6b     _TIMERDST       Timer-D 割り込み設定
$6c     _VDISPST        垂直同期(Timer-A)割り込み設定
$6d     _CRTCRAS        ラスター割り込み設定
$6e     _HSYNCST        水平同期割り込み設定
$6f     _PRNINTST       プリンタ割り込み設定
$70     _MS_INIT        マウス初期化
$71     _MS_CURON       マウスカーソル表示
$72     _MS_CUROF       マウスカーソル消去
$73     _MS_STAT        マウスカーソルの表示状態を調べる
$74     _MS_GETDT       マウス移動量/ボタン状態を調べる
$75     _MS_CURGT       マウスカーソルの座標収得
$76     _MS_CURST       マウスカーソルの座標設定
$77     _MS_LIMIT       マウスカーソルの移動範囲設定
$78     _MS_OFFTM       マウスのボタンを離すまでの時間を調べる
$79     _MS_ONTM        マウスのボタンを押すまでの時間を調べる
$7a     _MS_PATST       マウスカーソルのパターン定義
$7b     _MS_SEL         マウスカーソルのパターン選択
$7c     _MS_SEL2        マウスカーソルのアニメーション
$7d     _SKEY_MOD       ソフトキーボード制御
$7e     _DENSNS         電卓制御
$7f     _ONTIME         起動後の経過時間を調べる
$80     _B_INTVCS       ベクタ設定
$81     _B_SUPER        スーパーバイザ/ユーザモードの切り換え
$82     _B_BPEEK        指定アドレスから 1 バイト読み込み
$83     _B_WPEEK        指定アドレスから 1 ワード読み込み
$84     _B_LPEEK        指定アドレスから 1 ロングワード読み込み
$85     _B_MEMSTR       指定アドレスから複数バイト読み込み
$86     _B_BPOKE        指定アドレスヘ 1 バイト書き込み
$87     _B_WPOKE        指定アドレスヘ 1 ワード書き込み
$88     _B_LPOKE        指定アドレスヘ 1 ロングワード書き込み
$89     _B_MEMSET       指定アドレスヘ複数バイト書き込み
$8a     _DMAMOVE        DMA 転送
$8b     _DMAMOV_A       DMA 転送(アレイチェーン)
$8c     _DMAMOV_L       DMA 転送(リンクアレイチェーン)
$8d     _DMAMODE        DMA 状態検査
$8e     _BOOTINF        起動情報を得る
$8f     _ROMVER         ROM バージョンを得る
$90     _G_CLR_ON       グラフィック画面の初期化及び表示モードの設定
$91     (未公開)        グラフィック画面モードの設定
$92     (未公開)        プライオリティ設定
$93     (未公開)        画面表示及び特殊モードの設定
$94     _GPALET         グラフィックパレット設定
$95     (未公開)        カラーコード設定
$96     (未公開)        アクセスページ設定
$97     (未公開)        グラフィック VRAM のドット単位読み込み
$98     (未公開)        グラフィック VRAM のドット単位書き込み(色マスクあり)
$99     (未公開)        グラフィック VRAM のドット単位書き込み
$9a     (未公開)        グラフィック VRAM のビットパターン書き込み
$9b     (未公開)        グラフィック VRAM のビットパターン書き込み(バックカラーあり)
$9c     (未公開)        グラフィック VRAM のビットパターン拡大書き込み
$a0     _SFTJIS         S-JIS→JIS コード変換
$a1     _JISSFT         JIS→S-JIS コード変換
$a2     _AKCONV         ANK→S-JIS コード変換
$a3     _RMACNV         ローマ字→ANK カナ変換
$a4     _DAKJOB         濁点処理
$a5     _HANJOB         半濁点処理
$ac     _SYS_STAT       システム状態の設定
$ad     _B_CONMOD       カーソルおよびスクロールの設定
$ae     _OS_CURON       カーソル点滅開始
$af     _OS_CUROF       カーソル点滅終了
$b0     _DRAWMODE       グラフィック描画モードの設定
$b1     _APAGE          グラフィック描画ページの設定
$b2     _VPAGE          グラフィック画面表示ページの設定
$b3     _HOME           グラフィック画面の表示位置設定
$b4     _WINDOW         グラフィック描画ウィンドウの設定
$b5     _WIPE           グラフィック画面のクリア
$b6     _PSET           グラフィック画面のポイントセット
$b7     _POINT          グラフィック画面のポイントゲット
$b8     _LINE           グラフィック画面のライン
$b9     _BOX            グラフィック画面のボックス
$ba     _FILL           グラフィック画面のボックスフィル
$bb     _CIRCLE         グラフィック画面のサークル
$bc     _PAINT          グラフィック画面のペイント
$bd     _SYMBOL         グラフィック画面のシンボル
$be     _GETGRM         グラフィック画面のドット単位読み込み
$bf     _PUTGRM         グラフィック画面のドット単位書き込み
$c0     _SP_INIT        スプライト初期化
$c1     _SP_ON          スプライト表示
$c2     _SP_OFF         スプライト消去
$c3     _SP_CGCLR       スプライトパターンのクリア
$c4     _SP_DEFCG       スプライトパターンの定義
$c5     _SP_GTPCG       スプライトパターンの読み込み
$c6     _SP_REGST       スプライトレジスタの設定
$c7     _SP_REGGT       スプライトレジスタの読み出し
$c8     _BGSCRLST       バックグラウンドスクロールレジスタの設定
$c9     _BGSCRLGT       バックグラウンドスクロールレジスタの読み出し
$ca     _BGCTRLST       バックグラウンドコントロールレジスタの設定
$cb     _BGCTRLGT       バックグラウンドコントロールレジスタの読み出し
$cc     _BGTEXTCL       バックグラウンドテキストのクリア
$cd     _BGTEXTST       バックグラウンドテキストの設定
$ce     _BGTEXTGT       バックグラウンドテキストの読み出し
$cf     _SPALET         スプライトパレットの設定
$d0     _MACS_CALL      (ユーザ拡張) MACS 制御
$d1     _MOON           (ユーザ拡張) MOON 制御
$d3     _TXXLINE        テキスト画面の水平ライン
$d4     _TXYLINE        テキスト画面の垂直ライン
$d5     _TXLINE         テキスト画面のライン
$d6     _TXBOX          テキスト画面のボックス
$d7     _TXFILL         テキスト画面のボックスフィル
$d8     _TXREV          テキスト画面の反転
$df     _TXRASCPY       テキスト画面のラスターコピー
$f0     _OPMDRV         OPMDRV 制御
$f1     _RSDRV          拡張 RS-232C 制御
$f2     _A_JOYGET       アナログジョイスティック制御
$f3     _MUSICDRV       MUSICDRV 制御
$f4     (未定義)        (ユーザ拡張) Mercury Driver 制御
$f5     _SCSIDRV        SCSI IOCS
$fd     _ABORTRST       アボートする為に環境を再設定する
$fe     _IPLERR         再起動する
$ff     _ABORTJOB       アボート

==============================================================================

・キーのスキャンコード

キーコード      キー入力状態ビット
 グループ       7       6       5       4       3       2       1       0

        0       6&      5%      4$      3#      2"      1!      ESC
        1       BS      \|      ^~      -=      0       9)      8(      7'
        2       U       Y       T       R       E       W       Q       TAB
        3       S       A       CR      [{      @`      P       O       I
        4       ;+      L       K       J       H       G       F       D
        5       N       B       V       C       X       Z       ]}      :*
        6       DEL     HOME    SPACE   _       /?      .>      ,<      M
        7       CLR     ↓      →      ↑      ←      UNDO    R_DOWN  R_UP
        8       4       +       9       8       7       -       *       /
        9       0       ENTER   3       2       1       =       6       5
        a       XF3     XF2     XF1     HELP    登録    記号    .       ,
        b       ひら    INS     CAPS    コード  ﾛ-ﾏ字   かな    XF5     XF4
        c       F5      F4      F3      F2      F1      COPY    BREAK   全角
        d                               F10     F9      F8      F7      F6
        e                               NUM     OPT.2   OPT.1   CTRL    SHIFT
        f

        スキャンコード = キーコードグループ×8＋キー入力状態ビット

          10:TAB    20:D      30:M      40:/      50:,      60:全角   70:SHIFT
01:ESC    11:Q      21:F      31:,<     41:*      51:.      61:BREAK  71:CTRL
02:1!     12:W      22:G      32:.>     42:-      52:記号   62:COPY   72:OPT.1
03:2"     13:E      23:H      33:/?     43:7      53:登録   63:F1     73:OPT.2
04:3#     14:R      24:J      34:_      44:8      54:HELP   64:F2     74:NUM
05:4$     15:T      25:K      35:SPACE  45:9      55:XF1    65:F3
06:5%     16:Y      26:L      36:HOME   46:+      56:XF2    66:F4
07:6&     17:U      27:;+     37:DEL    47:4      57:XF3    67:F5
08:7'     18:I      28::*     38:R_UP   48:5      58:XF4    68:F6
09:8(     19:O      29:]}     39:R_DOWN 49:6      59:XF5    69:F7
0a:9)     1a:P      2a:Z      3a:UNDO   4a:=      5a:かな   6a:F8
0b:0      1b:@`     2b:X      3b:←     4b:1      5b:ﾛ-ﾏ字  6b:F9
0c:-=     1c:[{     2c:C      3c:↑     4c:2      5c:ｺ-ﾄﾞ   6c:F10
0d:^~     1d:CR     2d:V      3d:→     4d:3      5d:CAPS
0e:\|     1e:A      2e:B      3e:↓     4e:ENTER  5e:INS
0f:BS     1f:S      2f:N      3f:CLR    4f:0      5f:ひらがな

==============================================================================

==============================================================================

$00     _B_KEYINP       キーデータの読み込み

返値    キーデータ
        d0.hb   スキャンコード
        d0.b    ASCII コード

    　キーデータを読み込む。キーが入力されていなければ入力されるまで待つ。
    　SHIFT、CTRL、OPT.1、OPT.2 については、離したときにもスキャンコードに$80
    を足した値を返す。
    　ASCII コードは SHIFT、CTRL、かな、CAPS により変化し、また ASCII 文字が定
    義されていない場合は$00になる。
    　通常テレビコントロールに割り当てられているキーは入力されないが、押し下げ
    状態には反映される。

不具合
    該当環境: ROM IOCS 全バージョン
    修正環境: KeyWitch
    　電卓を使用すると d3 レジスタの値が破壊される。
    参考: https://stdkmd.net/bugsx68k/#rom_dentakud3

==============================================================================

$01     _B_KEYSNS       キーの入力検査

返値    d0.l =  $0000_0000  キー入力なし
                $0001_????  キー入力あり($???? はキーデータ)

    　キーが入力されているか調べる。キーデータバッファの内容は変化しない。

不具合
    該当環境: ROM IOCS 全バージョン
    修正環境: KeyWitch
    参照先: IOCS _B_KEYINP
    　電卓を使用すると d3 レジスタの値が破壊される。

==============================================================================

$02     _B_SFTSNS       シフトキー状態の収得

返値    d0.l    シフトキーの状態
                bit 14  全角
                bit 13  ひらがな
                bit 12  INS
                bit 11  CAPS
                bit 10  コード入力
                bit  9  ローマ字
                bit  8  かな

                bit  7  CAPS
                bit  6  コード入力
                bit  5  ローマ字
                bit  4  かな
                bit  3  OPT.2
                bit  2  OPT.1
                bit  1  CTRL
                bit  0  SHIFT

                bit 7～0 はキーが実際に押されている(1)か押されていない(0)か、
                bit 14～8 は LED が点灯(1)しているか消灯(0)しているかを表す。

        シフトキーの状態を調べる。

==============================================================================

$03     _KEY_INIT       入力関係の初期化

引数    d1.b    LED キーモード初期値

        キーボードバッファをクリアし、LED モードを初期化する。この IOCS コール
        は ROM 起動時に使用されるので、一般のアプリケーションからは使用禁止。
        ROM IOCS では、ショートカットで呼び出すと割り込みが全て許可された状態
        で帰るので注意すること。

==============================================================================

$04     _BITSNS         キー状態の収得

引数    d1.w    キーコードグループ(0～$f)

返値    d0.b    キーの押し下げ状態

        指定したキーコードグループに含まれるキーの押し下げ状態をビット単位で
        調べる。対応するビットが 1 でキーが押されていることを示す。

==============================================================================

$05     _SKEYSET        キー入力の発生

引数    d1.l    スキャンコード
                bit 7           0:キーを押す    1:キーを離す
                bit 6～0        スキャンコード

        指定したキーの入力をソフト的に発生させる。

ユーザー拡張
    　KeyWitch 組み込み時は d1.w = $ffff で KWCall を呼び出す(d1.hw でコール番
    号を指定)。

==============================================================================

$06     _LEDCTRL        キーボード LED の設定

引数    d1.b    キーボード LED 状態
                bit 6   全角
                bit 5   ひらがな
                bit 4   INS
                bit 3   CAPS
                bit 2   コード入力
                bit 1   ローマ字
                bit 0   かな

        キーボード LED のモードを設定する。キー入力モードは変更されない。

==============================================================================

$07     _LEDSET         キーボード LED をキー入力モードに合わせる

        キーボード LED のモードをキー入力モードに合わせる。

==============================================================================

$08     _KEYDLY         キーリピートの開始時間設定

引数    d1.b    キーリピート開始時間(0～15)

        キーリピート開始までの時間を (200＋100×d1.b)ms に設定する。

==============================================================================

$09     _KEYREP         キーリピートの間隔設定

引数    d1.b    キーリピート間隔(0～15)

        キーリピートの間隔を (30＋5×d1.b^2)ms に設定する。

==============================================================================

$0a     (未公開)        OPT.2 によるテレビコントロール許可

    　OPT.2 キーによるテレビコントロールを許可する。

    　ROM IOCS では、d0.b に $0a がセットされた状態で呼び出さないと正常動作し
    ないので注意すること。

非公式情報
    コール名 _OPT2TVON
    参考: https://stdkmd.net/udcx68k/#iocs_opt2tvon

==============================================================================

$0b     (未公開)        OPT.2 によるテレビコントロール禁止

    　OPT.2 キーによるテレビコントロールを禁止する。

    　ROM IOCS では、d0.b に $0b がセットされた状態で呼び出さないと正常動作し
    ないので注意すること。

非公式情報
    コール名 _OPT2TVOFF
    参考: https://stdkmd.net/udcx68k/#iocs_opt2tvoff

==============================================================================

$0c     _TVCTRL         テレビコントロール

引数    d1.l    テレビコントロールコード
                d1.l =   $01    ボリュームアップ
                         $02    〃        ダウン
                         $03    〃        標準
                         $04    チャンネルコール
                         $05    テレビ画面(リセット)
                         $06    音声ミュート
                         $07    電源オン
                         $08    テレビ/コンピュータ画面切り替え
                         $09    テレビ/外部入力の切り替え若しくは
                                コンピュータ表示モードの変更
                         $0a    コントラスト標準
                         $0b    チャンネルアップ
                         $0c    〃        ダウン
                         $0d    電源オフ
                         $0e    電源オン/オフ切り替え
                         $0f    スーパーインポーズ及び
                                コントラストダウン/標準切り替え
                         $10    チャンネル 1
                         $11    〃         2
                         $12    〃         3
                         $13    〃         4
                         $14    〃         5
                         $15    〃         6
                         $16    〃         7
                         $17    〃         8
                         $18    〃         9
                         $19    〃        10
                         $1a    〃        11
                         $1b    〃        12
                         $1c    テレビ画面($05)
                         $1d    コンピュータ画面($05+$08)
                         $1e    スーパーインポーズ及びコントラストダウン
                                                                ($05+$0f)
                         $1f    スーパーインポーズ及びコントラスト標準
                                                                ($05+$0f+$0a)
                        +$20    電源オン($07)後、上記の機能を実行

返値    d1.w は破壊される。

        ディスプレイを制御する。

==============================================================================

$0d     _LEDMOD         LED モードの設定

引数    d1.l    LED キーの番号
                d1.l =  0       かな
                        1       ローマ字
                        2       コード入力
                        3       CAPS
                        4       INS
                        5       ひらがな
                        6       全角
        d2.b    ON/OFF の指定(0:OFF 1:ON)

返値    d0.l =  0       正常終了
                -1      エラー(キー番号が大きすぎる)

        キーボード LED とキー入力モードを設定する。

==============================================================================

$0e     _TGUSEMD        画面の使用状態の設定

引数    d1.b    グラフィック/テキスト画面の指定
                d1.b =  0       グラフィック画面($c00000～$dfffff)
                        1       テキスト画面    ($e40000～$e7ffff)
        d2.b    画面の使用状態
                d2.b =  0       未使用
                        1       システムで使用中(ソフトキーボード/電卓)
                        2       アプリケーションで使用中(RAMDISK等)
                        3       破壊
                        -1      現在の使用状態を調べる。

返値    変更前の使用状態(-1 なら画面の指定が異常)

        グラフィック/テキスト画面の使用状態を設定する。
        テキストの使用状態を 2 にすると、ソフトキーボード/電卓が消去され、以後
        マウスカーソル/ソフトキーボード/電卓が新たに表示出来なくなる。

==============================================================================

$0f     _DEFCHR         外字定義

引数    d1.hw   パターンの大きさ
            d1.hw =  8 …… 8x16,16x16ドット
                    12 …… 12x24,24x24ドット
        d1.w    漢字コード(Shift-JIS または JIS)
        a1.l    パターンアドレス

返値    d0.l =  0 …… 正常終了
               -1 …… エラー(指定の漢字コードは外字ではない)

    　外字を設定する。

    　指定できる漢字コードの範囲は明確ではなく、XC のプログラマーズマニュアル
    では JIS コードとして $7621～$777e が挙げられているのみだが、以下のコード
    が対象と思われる。
                       Shift-JIS        JIS
        外字A(全角)  $869f～$879e  $2c21～$2d7e
        外字B(全角)  $eb9f～$ec9e  $7621～$777e
        半角外字     $f400～$f5ff

    　実際の ROM IOCS の実装は、
        1. IOCS _FNTADR でフォントのアドレスを取得する。
        2. アドレスが $00f0_0000(CGROM) 以上ならエラー終了。
        3. 取得したアドレスに対しパターンを複写する。
    という内容となっている。

不具合
    該当環境: ROM IOCS 全バージョン
    修正環境: Human68k による外字フォントバッファ確保後
    　IPL ROM の初期化処理において外字フォントアドレスが設定されず、外字グルー
    プ番号0～3のアドレスが $0 となっている。この状態で外字を設定するとアドレス
    $0 以降のメモリを破壊する。
    　通常は Human68k 起動時に外字フォントバッファが確保・設定されるが、されな
    い場合もあるので注意すること。

ユーザー拡張
    　CONDRV.SYS 及び HIOCS.X 常駐時には、d1.l = 0 でカーソルの形状を設定し、
    d1.l = -1 で元に戻す。また、d1.l = $ffff で CONDRV.SYS のバックスクロール
    ウィンドウ内のカーソル形状を設定する。

==============================================================================

$10     _CRTMOD         CRT モード設定

　CRT モードを設定または取得する。

　引数 d1.w により動作モードが切り替わる。
    d1.w = 0～27(+$100) …… CRT モードを設定する
    d1.w = -1 ………………… 現在のモードを取得する

d1.w = 0～27(+$100) …… CRT モードを設定する
    　CRT モードを設定する。

    引数    d1.w    CRT モード
                    下記の値に +$100 することでモードの切り換えのみを行なう

            d1.w    実画面     表示画面   色数  枚数   水平   ROM version
                    サイズ      サイズ                周波数  1.0 1.2 1.3
              0   1024×1024   512×512   16色   1枚   31kHz   X   X   X
              1   1024×1024   512×512   16色   1枚   15kHz   X   X   X
              2   1024×1024   256×256   16色   1枚   31kHz   X   X   X
              3   1024×1024   256×256   16色   1枚   15kHz   X   X   X
              4    512× 512   512×512   16色   4枚   31kHz   X   X   X
              5    512× 512   512×512   16色   4枚   15kHz   X   X   X
              6    512× 512   256×256   16色   4枚   31kHz   X   X   X
              7    512× 512   256×256   16色   4枚   15kHz   X   X   X
              8    512× 512   512×512  256色   2枚   31kHz   X   X   X
              9    512× 512   512×512  256色   2枚   15kHz   X   X   X
             10    512× 512   256×256  256色   2枚   31kHz   X   X   X
             11    512× 512   256×256  256色   2枚   15kHz   X   X   X
             12    512× 512   512×512  64K色   1枚   31kHz   X   X   X
             13    512× 512   512×512  64K色   1枚   15kHz   X   X   X
             14    512× 512   256×256  64K色   1枚   31kHz   X   X   X
             15    512× 512   256×256  64K色   1枚   15kHz   X   X   X
             16   1024×1024   768×512   16色   1枚   31kHz   X   X   X
             17   1024×1024  1024×424   16色   1枚   24kHz   X   X   X
             18   1024×1024  1024×848   16色   1枚   24kHz   X   X   X
             19   1024×1024   640×480   16色   1枚    VGA        X   X
             20    512× 512   768×512  256色   2枚   31kHz   !   !   X
             21    512× 512  1024×424  256色   2枚   24kHz   !   !   X
             22    512× 512  1024×848  256色   2枚   24kHz   !   !   X
             23    512× 512   640×480  256色   2枚    VGA        !   X
             24    512× 512   768×512  64K色   1枚   31kHz   !   !   X
             25    512× 512  1024×424  64K色   1枚   24kHz   !   !   X
             26    512× 512  1024×848  64K色   1枚   24kHz   !   !   X
             27    512× 512   640×480  64K色   1枚    VGA        !   X

            ROM version の項目について:
                X …… 使用可能。
                ! …… IOCS コールでは指定できないが、ハードウェア上は使用可能。

    返値    なし

    　テキスト画面のプレーン 0/1 をクリアして表示モードに、グラフィック画面と
    スプライト画面はクリアせずに無表示モードにする。テキストパレットは初期化さ
    れる。

    　IOCS _CRTMOD 実行後にグラフィック画面を表示する場合は、IOCS _G_CLR_ON を
    使用する。

    　d1.w = 19 は ROM IOCS version 1.2 以上(Compact 以降)で使用可能。

    　d1.w = 20～27 は ROM IOCS version 1.3 (X68030)だけで使用可能。グラフィッ
    ク画面の実画面サイズが表示画面サイズより小さいモード。

    　なお X68000 のハードウェア上は、ROM IOCS version 1.1 以下(XVI まで)でも
    VGA 以外の画面モードが、ROM IOCS version 1.2(Compact)なら全ての画面モード
    が実現可能である。これらはそのバージョンの ROM IOCS に用意されておらず指定
    できないだけなので、CRTC に設定値を直接書き込むことで表示できる。また ROM
    1.1 以下でもモニタによっては VGA 画面をある程度表示できる場合もある。

    　仕様として返値はない。d1.w に対応していないモードを指定した場合は何も行
    われないが、返値がないためエラーを検出することはできない。

    非公式情報
        　ROM IOCS では、通常の呼び出し方をするとエラー時に d0.l = $10 が返る
        実装となっている(この値は呼び出し元で moveq #_CRTMOD,d0、trap #15 処理
        ルーチン内で and.l #$ff,d0 が実行された結果である)。

    不具合
        該当環境: ROM IOCS 全バージョン
        　未公開の動作としてグラフィックパレットの初期化も行われるが、正しく動
        作しない。水平ドット数256×256の場合に16色、512×512の場合に256色、そ
        れ以外の場合に65536色として初期化される。グラフィック画面を表示するた
        めに IOCS _G_CLR_ON を呼び出せばパレットが正しく初期化される。
        参考: https://stdkmd.net/bugsx68k/#rom_crtmod_gpalet

    不具合
        該当環境: ROM IOCS version 1.3
        　d1.w = 20～27 を指定すると IOCS ワークには画面モードが 16～19 として
        保存される。この影響で、IOCS _G_CLR_ON を呼び出すと16色に変更されてし
        まう。
        参考: https://stdkmd.net/xeij/ misc/crtmod16.s

    不具合
        該当環境: ROM IOCS version 1.3
        　d1.w = 22、26 を指定すると、グラフィック画面のクリッピング範囲の下端
        Y座標が847に設定される。
        参考: https://stdkmd.net/xeij/ misc/crtmod16.s

d1.w = -1 …… 現在のモードを取得する
    　現在の CRT モードを取得する。

    返値    d0.l    現在のモード(0～27)

ユーザー拡張
    　CRT モードを拡張する改造 IOCS ROM や常駐ソフトウェアが複数ある。代表的な
    ものとして XEiJ (X68000 Emulator in Java) の IPLROM 1.6 と、その機能を常駐
    プログラム化した crtmod16.x がある。

==============================================================================

$11     _CONTRAST       コントラスト設定

引数    d1.b    コントラスト
                d1.b =  0～15   コントラストを設定する
                        -1      コントラストを調べる
                        -2      システム設定値に戻す

返値    変更前のコントラスト

        コントラストを設定する。

==============================================================================

$12     _HSVTORGB       HSV→RGB 変換

引数    d1.l    HSV データ
                %iiif_ffff_000s_ssss_000v_vvvv
                bit 23～21      色相
                        %000    赤      ～黄色
                        %001    黄色    ～緑
                        %010    緑      ～シアン
                        %011    シアン  ～青
                        %100    青      ～マゼンタ
                        %101    マゼンタ～赤
                        %110    禁止
                        %111    〃
                bit 20～16      色相(色合)
                bit 12～ 8      彩度(0:白 $1f:原色)
                bit  4～ 0      明度(0:黒 $1f:原色)

返値    RGB データ(輝度ビットは常に 0)
                %gggg_grrr_rrbb_bbb0
                bit 15～11      緑成分
                bit 10～ 6      赤〃
                bit  5～ 1      青〃
        ただし、色相が異常な場合は -1 が返る。

        HSV 方式による色データを RGB 方式に変換する。
        HSV 方式は、色相/彩度/明度による色の指定方法。

==============================================================================

$13     _TPALET         テキストパレット設定

引数    d1.b    パレットコード(0～15)
                d1.b =  0       テキストカラー          0
                        1       〃                      1
                        2       〃                      2
                        3       〃                      3
                        4～7    ソフトキーボード/電卓   0
                        8～15   〃                      1
        d2.l    カラーコード
                d2.l =  0～$ffff  カラーコードを設定
                        -1      カラーコードを調べる
                        -2      システム設定値に戻す

返値    ステータス(d2.l = -1 の時はカラーコード)
        d0.l =   0      正常終了
                -1      カラーコードが異常

        テキストパレットにカラーコードを設定する。パレットに 4～7、8～15 を指
        定した時は、それらの全てに同じカラーコードが設定される。

==============================================================================

$14     _TPALET2        テキストパレット独立設定

引数    d1.b    パレットコード(0～15)
        d2.l    カラーコード
                d2.l =  0～$ffff  カラーコードを設定
                       -1         カラーコードを調べる

返値    d0.l    ステータス(d2.l = -1 の時はカラーコード)
            d0.l =  0   正常終了
                   -1   カラーコードが異常

    　テキストパレットにカラーコードを設定する。IOCS _TPALET($13) とは違い、パ
    レットごとに独立して設定できる。

==============================================================================

$15     _TCOLOR         テキストプレーン指定

引数    d1.b    アクセスプレーンの指定
                d1.b =  %???1   プレーン 0
                        %??10   〃       1
                        %?100   〃       2
                        %1000   〃       3
                        %0000   〃       0

返値    d1.w は破壊される。

        IOCS _TEXTGET($1a)、_TEXTPUT($1b)、_CLIPPUT($1c) でアクセスされるテキ
        ストプレーンを設定する。使用後はプレーン 0 を設定しなければならないが、
        0 に戻さなかった場合、その他の IOCS コールの動作は保証されない。

==============================================================================

$16     _FNTADR         フォントアドレスの収得

引数    d1.w    漢字コード(Shift-JIS/JIS)
        d2.b    パターンの大きさ
                d2.b =  6        6x12, 12x12ドット
                        8        8x16, 16x16ドット
                        12      12x24, 24x24ドット

返値    d0.l    パターンアドレス
        d1.hw   パターンの X 方向のドット数
        d1.w    パターンの X 方向のバイト数-1
        d2.w    パターンの Y 方向のドット数-1

        指定の文字フォントのアドレスを調べる。
        得られたアドレスはスーパーバイザ領域の可能性がある。
        それぞれの文字は文字コードの順に連続的に配置されているとは限らない。
        外字、12ドット文字はいつまでもパターンデータが残っているとは限らない。

        この IOCS コールはシステムで使用するので、一般のアプリケーションからは
        使用しないこと。

        パターンの大きさに未定義の値を指定した場合の動作は規定されておらず、環
        境によって結果が違うので未定義の値は指定しないこと。

        IOCS _FNTGET と異なり、パターンの大きさに 0 を指定することはできない。
        ROM IOCS version 1.3、HIOCS.X では d2.b = 0 の場合 8 が指定されたもの
        として扱われるが、保証された仕様ではなく、他の環境だと結果が異なる。

ユーザー拡張
        hfont.r 組み込み時は10ドットフォントを指定できる。
                d2.b =  5        5x10, 10x10ドット

==============================================================================

$17     _VRAMGET        テキスト VRAM のバイト単位読み込み

引数    d1.w    バッファの X 方向のバイト数-1
        d2.w    〃         Y    〃 ドット数-1
        d3.l    (VRAM の X 方向-バッファの X 方向)のバイト数
        a1.l    バッファのアドレス
        a2.l    VRAM    〃

返値    d0/d1/d2/a1/a2 は内容が保証されない。

        VRAM からバッファにバイト単位で読み込む。
        VRAM にテキスト画面を指定する場合は、VRAM の X 方向のバイト数は 128 バ
        イトとなる。

==============================================================================

$18     _VRAMPUT        テキスト VRAM のバイト単位書き込み

引数    d1.w    バッファの X 方向のバイト数-1
        d2.w    〃         Y    〃 ドット数-1
        d3.l    (VRAM の X 方向-バッファの X 方向)のバイト数
        a1.l    バッファのアドレス
        a2.l    VRAM    〃

返値    d0/d1/d2/a1/a2 は内容が保証されない。

        バッファから VRAM にバイト単位で書き込む。
        VRAM にテキスト画面を指定する場合は、VRAM の X 方向のバイト数は 128 バ
        イトとなる。

==============================================================================

$19     _FNTGET         フォント読み込み

引数    d1.hw   パターンの大きさ
                d1.hw = 6        6x12, 12x12ドット
                        0, 8     8x16, 16x16ドット
                        12      12x24, 24x24ドット
        d1.w    漢字コード(Shift-JIS/JIS)
        a1.l    データバッファのアドレス(4＋フォントサイズ分のバイト数が必要)
                (0,a1)  パターンの X 方向のドット数
                (2,a1)  パターンの Y 方向のドット数
                (4,a1)  パターンデータ

返値    d0 は内容が保証されない。

        指定の文字フォントを読み込む。

        パターンの大きさに未定義の値を指定した場合の動作は規定されておらず、環
        境によって結果が違うので未定義の値は指定しないこと。

        IOCS _FNTADR と異なり、パターンの大きさに 0 を指定することができる。

ユーザー拡張
        hfont.r 組み込み時は10ドットフォントを指定できる。
                d1.hw = 5        5x10, 10x10ドット

==============================================================================

$1a     _TEXTGET        テキスト VRAM のドット単位読み込み

引数    d1.w    X 座標
        d2.w    Y 座標
        a1.l    データバッファのアドレス
                (0,a1)  パターンの X 方向のドット数
                (2,a1)             Y 〃
                (4,a1)  (パターンデータ)

        テキスト VRAM からドット単位で読み込む。

==============================================================================

$1b     _TEXTPUT        テキスト VRAM のドット単位書き込み

引数    d1.w    X 座標
        d2.w    Y 座標
        a1.l    データバッファのアドレス
                (0,a1)  パターンの X 方向のドット数
                (2,a1)             Y 〃
                (4,a1)  パターンデータ

        テキスト VRAM へドット単位で書き込む。

==============================================================================

$1c     _CLIPPUT        テキスト VRAM のドット単位書き込み(クリッピング処理あり)

引数    d1.w    X 座標
        d2.w    Y 座標
        a1.l    データバッファのアドレス
                (0,a1)  パターンの X 方向のドット数
                (2,a1)             Y 〃
                (4,a1)  パターンデータ
        a2.l    クリッピング座標バッファのアドレス
                (0,a2)  左端 X 座標
                (2,a2)  上端 Y 〃
                (4,a2)  右端 X 〃
                (6,a2)  下端 Y 〃

        クリッピング処理をしながら、テキスト VRAM へドット単位で書き込む。

==============================================================================

$1d     _SCROLL         表示座標の設定

引数    d1.w    動作の指定
                d1.w =  0       グラフィックページ 0 の設定
                        1               〃         1 〃
                        2               〃         2 〃
                        3               〃         3 〃
                        4               〃         0 の表示座標の収得のみ
                        5               〃         1 〃
                        6               〃         2 〃
                        7               〃         3 〃
                        8       テキストの設定
                        9               〃表示座標の収得のみ
        d2.w    X 座標(設定時)
        d3.w    Y 〃

返値    変更前の表示座標
        d0.hw   X 座標
        d0.lw   Y 〃

        グラフィック及びテキストの表示座標を設定する。
        テキスト画面の X 座標を、表示画面が実画面からはみ出る位置に設定すると
        表示が乱れる。
        通常、変更前の表示座標はハードウェアの仕様により常に 0 が返る。

==============================================================================

$1e     _B_CURON        カーソル点滅の一時停止解除

返値    なし(d0.l は内容が保証されない)

    　カーソル点滅の一時停止を解除する。カーソルが描画されていない場合でもただ
    ちに描画はされず、タイマーにより一定時間後に描画される。

    　カーソルの点滅が開始されていない場合(IOCS _OS_CUROF)は、何も行われない。

    　プログラムからテキスト画面を直接読み書きする場合、カーソルが描画されてい
    たり、読み書き中にカーソルが描画・消去されると正しい結果が得られない。これ
    を防ぐには IOCS _B_CUROFF を呼び出してからテキスト画面を読み書きし、その後
    で IOCS _B_CURON を呼び出す。この手順によりカーソル点滅の有効(IOCS
    _OS_CURON)または無効(IOCS _OS_CUROF)の状態を変化せずにテキスト画面を読み書
    きできる。

==============================================================================

$1f     _B_CUROFF       カーソル点滅の一時停止

返値    なし(d0.l は内容が保証されない)

    　カーソル点滅を一時停止する。カーソルが描画されている場合は、ただちに消去
    する。

    　カーソルの点滅が開始されていない場合(IOCS _OS_CUROF)は、何も行われない。

==============================================================================

$20     _B_PUTC         文字表示

引数    d1.w    文字コード

返値    d0.l    表示後のカーソル位置
            d0.hw   桁位置
            d0.w    行位置

    　文字を表示する。2バイト文字を表示する場合、第1バイト、第2バイトを2回に分
    けて IOCS _B_PUTC を呼び出してもかまわない。

    　画面の右端で半角1文字しか表示出来ない時に全角文字を表示しようとした場合、
    半角スペースを表示し改行してから全角文字を表示する。

==============================================================================

$21     _B_PRINT        文字列表示

引数    a1.l    文字列のアドレス

返値    d0.l    表示後のカーソル位置
            d0.hw   桁位置
            d0.w    行位置
        a1.l    文字列終端の $00(NUL) の次のアドレス

    　文字列を表示する。

==============================================================================

$22     _B_COLOR        表示色設定

引数    d1.w    表示属性
              0: テキストパレット 0 (通常、黒)
              1: テキストパレット 1 (通常、水色)
              2: テキストパレット 2 (通常、黄色)
              3: テキストパレット 3 (通常、白)
            + 4:     強調
            + 8: 逆転
            +12: 逆転強調
             -1: 属性を調べる

返値    d0.l    変更前の表示属性(負数なら表示属性の指定が異常)

    　IOCS _B_PUTC($20)、_B_PRINT($21) で表示する文字の属性を設定する。

==============================================================================

$23     _B_LOCATE       カーソル移動

引数    d1.w    桁位置(ただし、d1.w = -1 ならカーソル位置の収得のみ)
        d2.w    行位置

返値    d0.l    移動前のカーソル位置(-1ならカーソル位置の指定が異常)
            d0.hw   桁位置
            d0.w    行位置

    　カーソルを指定位置に移動、または現在の位置を取得する。
    　ROM IOCS version 1.3 では、座標収得時のみ d1.l に d0.l と同じ値が返る。

==============================================================================

$24     _B_DOWN_S       カーソルを1行下に移動

返値    d0.l = 0
            (XC プログラマーズマニュアルでは返値なし、d0.l は内容が保証されな
            いとされているが、実際には上記の値を返す)

    　カーソルを1行下に移動する。カーソルが最下行にある場合はスクロールアップ
    する。

==============================================================================

$25     _B_UP_S         カーソルを1行上に移動

返値    d0.l = 0
            (XC プログラマーズマニュアルでは返値なし、d0.l は内容が保証されな
            いとされているが、実際には上記の値を返す)

    　カーソルを1行上に移動する。カーソルが先頭行にある場合はスクロールダウン
    する。

==============================================================================

$26     _B_UP           カーソルを指定行数だけ上に移動

引数    d1.b    移動行数(0の場合は1と見なす)

返値    d0.l = 0
              -1 …… ROM IOCS version 1.3 で移動しなかった場合
            (XC プログラマーズマニュアルでは返値なし、d0.l は内容が保証されな
            いとされているが、実際には上記の値を返す)

    　カーソルを指定行上に移動する。指定行数だけ移動できない場合は移動しない。

==============================================================================

$27     _B_DOWN         カーソルを指定行数だけ下に移動

引数    d1.b    移動行数(0の場合は1と見なす)

返値    d0.l = 0
              -1 …… ROM IOCS version 1.3 で移動しなかった場合
            (XC プログラマーズマニュアルでは返値なし、d0.l は内容が保証されな
            いとされているが、実際には上記の値を返す)

    　カーソルを指定行下に移動する。指定行数だけ移動できない場合は最下行まで移
    動する。

==============================================================================

$28     _B_RIGHT        カーソルを指定桁数だけ右に移動

引数    d1.b    移動桁数(0の場合は1と見なす)

返値    d0.l = 0
            (XC プログラマーズマニュアルでは返値なし、d0.l は内容が保証されな
            いとされているが、実際には上記の値を返す)

    　カーソルを指定桁右に移動する。指定桁数だけ移動できない場合は右端まで移動
    する。

==============================================================================

$29     _B_LEFT         カーソルを指定桁数だけ左に移動

引数    d1.b    移動桁数(0の場合は1と見なす)

返値    d0.l = 0
            (XC プログラマーズマニュアルでは返値なし、d0.l は内容が保証されな
            いとされているが、実際には上記の値を返す)

    　カーソルを指定桁左に移動する。指定桁数だけ移動できない場合は左端まで移動
    する。

==============================================================================

$2a     _B_CLR_ST       画面の複数行消去

引数    d1.b    消去範囲の指定
            0: カーソル位置から最終行右端まで
            1: 先頭行左端からカーソル位置まで
            2: 画面全体(消去後、カーソルは先頭行左端に移動する)

返値    d0.l = 0 …… 成功
              -1 …… エラー(消去範囲の指定が異常)
            (XC プログラマーズマニュアルでは返値なし、d0.l は内容が保証されな
            いとされているが、実際には上記の値を返す)

    　範囲を指定して画面の複数行を消去する。

不具合
    該当環境: ROM IOCS 全バージョン、IOCS.X
    修正環境: HIOCS.X
    　画面全体(引数 d1.b = 2)を消去した場合、d0.l に0以外の値を返す。
        ROM IOCS version 1.2 以下  ……… $0000ffff
        ROM IOCS version 1.3、IOCS.X …… $00000020

==============================================================================

$2b     _B_ERA_ST       現在行の複数桁消去

引数    d1.b    消去範囲の指定
            0: カーソル位置から右端まで
            1: 左端からカーソル位置まで
            2: カーソル行全体

返値    d0.l = 0 …… 成功
              -1 …… エラー(消去範囲の指定が異常)
            (XC プログラマーズマニュアルでは返値なし、d0.l は内容が保証されな
            いとされているが、実際には上記の値を返す)

    　範囲を指定してカーソル行の複数桁を消去する。

==============================================================================

$2c     _B_INS          複数行挿入

引数    d1.b    挿入行数(0の場合は1と見なす)

返値    d0.l = 0
            (XC プログラマーズマニュアルでは返値なし、d0.l は内容が保証されな
            いとされているが、実際には上記の値を返す)

    　カーソル位置に指定した数だけ空行を挿入する。カーソル以下の行はスクロール
    する。挿入後、カーソルは左端に移動する。

不具合
    該当環境: ROM IOCS version 1.2 以下
    修正環境: IOCS.X、HIOCS.X
    　引数の d1.b が0以外のとき、d1.hb (d1.w の上位バイト)が0以外だと、カーソ
    ル以下の行がすべて消去される。

==============================================================================

$2d     _B_DEL          複数行削除

引数    d1.b    削除行数(0の場合は1と見なす)

返値    d0.l = 0
            (XC プログラマーズマニュアルでは返値なし、d0.l は内容が保証されな
            いとされているが、実際には上記の値を返す)

    　カーソル位置から指定した行数だけ削除する。カーソル行以下の行はスクロール
    する。削除後、カーソルは左端に移動する。

不具合
    該当環境: ROM IOCS version 1.2 以下
    修正環境: IOCS.X、HIOCS.X
    　引数の d1.b が0以外のとき、d1.hb (d1.w の上位バイト)が0以外だと、カーソ
    ル以下の行がすべて消去される。

==============================================================================

$2e     _B_CONSOL       表示範囲設定

引数    d1.l    表示開始位置(d1.l = -1 の時変更しない)
                d1.hw   X 方向の表示開始ドット位置(16 の倍数で 1008 以下)
                d1.w    Y 方向の表示開始ドット位置( 4 の倍数で 1020 以下)
        d2.l    表示範囲(d2.l = -1 の時変更しない)
                d2.hw   X 方向の表示桁数-1(0～127)
                d2.w    Y 方向の表示行数-1(0～ 63)

返値    d0.l = 0
            (XC プログラマーズマニュアルでは d0.l は内容が保証されないとされて
            いるが、実際には上記の値を返す)
        d1.l    変更前の表示開始オフセット(入力と同じ形式)
        d2.l    変更前の表示範囲オフセット(入力と同じ形式)

    　テキスト画面の表示範囲を設定する。カーソルは先頭行左端に移動する。IOCS
    $20～$2d で扱う座標は設定した表示範囲の左上が (0,0) となり、表示範囲内に影
    響する。ただし、スクロール/画面クリアは表示範囲外の桁にも影響が出る。表示
    範囲だけスクロールさせるには IOCS _B_CONMOD($ad) のモード 18:ソフトコピー
    スクロールを指定する。

    　引数に -1 を指定して設定値を取得する機能は d1.l と d2.l で別々に扱われる
    ので、表示開始位置だけを取得したい場合は d1.l だけでなく d2.l にも -1 を指
    定して表示範囲が変更されないように注意すること。

    　IOCS.X 組み込み時は引数の d1.hw に 8 の倍数を指定出来るが、ROM IOCS
    version 1.3 未満で 8 の倍数を指定するとアドレスエラーが発生するので注意す
    ること。

==============================================================================

$2f     _B_PUTMES       座標指定文字列表示

引数    d1.b    表示属性
              0: テキストパレット 0 (通常、黒)
              1: テキストパレット 1 (通常、水色)
              2: テキストパレット 2 (通常、黄色)
              3: テキストパレット 3 (通常、白)
            + 4:     強調
            + 8: 逆転
            +12: 逆転強調
        d2.w    表示桁位置(絶対座標:0～127)
        d3.w    表示行位置(絶対座標:0～ 63)
        d4.w    表示桁数-1
        a1.l    表示文字列のアドレス

返値    d0.l    不定(内容は保証されない)
        d2.w    表示後の桁位置
        d4.w    不定(内容は保証されない)
        a1.l    文字列の終端のアドレス(指定した文字列が表示桁数より長ければ、
                最後に表示した文字の次のアドレス)

    　指定した絶対座標から文字列を直接表示する。ファンクションキー行表示用で、
    IOCS _B_CONSOL($2e) の影響を受けない。

    　桁数以上は表示しない(全角文字が表示出来ない場合は半角スペースが表示され
    る)。文字列が指定の桁数未満の長さの場合、残りは半角スペースを表示する。文
    字コード $fe は空白が表示される。テキスト画面の右端まで行ったらそれ以上表
    示せず、スクロールもしない。

    　ファンクションキー行の表示以外に用いる場合はカーソルの点滅の影響を受ける
    ので、必要に応じて IOCS _B_CUROFF と IOCS _B_CURON を呼び出すこと。

==============================================================================

$30     _SET232C        RS-232C パラメータ設定

引数    d1.w    RS-232C 設定値(d1.w = -1 の時 現在の設定を調べます)
                bit 15～14      ストップビット(1:1bit 2:1.5bit 0,3:2bit)
                bit 13～12      パリティ(1:奇数 3:偶数 0,2:なし)
                bit 11～10      ビット長(0:5bit以下 1:6bit 2:7bit 3:8bit)
                bit      9      XON/XOFF処理(0:OFF 1:ON)
                bit      8       SI/SO  処理(    〃    )
                bit  7～ 0      BPS(0:  75 1: 150 2: 300 3: 600 4:1200
                                    5:2400 6:4800 7:9600 8:17361)

返値    変更前の設定

        RS-232C のモードを設定する。
        BPS に範囲外の値を指定した場合、1200BPS として初期化する。
        ROM IOCS では、SI/SO処理が正常に動作しないので使用しないこと。
        BPS の 8 番は ROM IOCS version 1.3 だけで使用可能。

==============================================================================

$31     _LOF232C        RS-232C 受信バッファのデータ数を求める

返値    d0.w    RS-232C 受信データ数

        RS-232C の受信バッファ内のデータ数を調べる。

==============================================================================

$32     _INP232C        RS-232C 受信データを得る

返値    d0.w    RS-232C 受信データ(下位 8 ビット)

        RS-232C からデータを受信する。
        データを受信していなければ受信するまで待つ。

==============================================================================

$33     _ISNS232C       RS-232C 受信データの検査

返値    d0.l =  0       受信データなし
                $100??  〃        あり($?? は受信データ)

        RS-232C からデータを受信しているか調べる。
        受信データバッファの内容は変化ない。

==============================================================================

$34     _OSNS232C       RS-232C データが送信可能か検査する

返値    d0.l =  0       送信不可能
                4        〃 可能(バッファが空で、XON でもない)

        RS-232C にデータが送信可能か調べる。

==============================================================================

$35     _OUT232C        RS-232C データ送信

引数    d1.b    送信データ

        RS-232C にデータを送信する。
        データが送信不可能であれば送信可能になるまで待つ。

==============================================================================

$36     (未公開)        マウスデータ受信時の処理アドレス設定

引数    d1.l    処理アドレス(0 の時取り消し)
        d2.w    カウンタ初期値

    　マウスからデータを受信した時に呼び出されるサブルーチンのアドレスを設定す
    る。通常はマウス処理 IOCS で使用するデータの書き換えを行うアドレスが設定さ
    れている。

    　設定したアドレスが呼び出される時は、a1.l が示すアドレスからの3バイトにマ
    ウスからの受信データがセットされている。

    　カウンタの値を大きくすると呼び出される間隔が長くなる(1のとき最短)。

    　処理アドレスに0を指定すると、標準アドレスが設定される。

非公式情報
    コール名 _MS_VCS
    参考: https://stdkmd.net/udcx68k/#iocs_ms_vcs

==============================================================================

$37     (未公開)        ESC[> 系エスケープシーケンスの拡張処理アドレス設定

引数    d1.l    処理アドレス(0 の時取り消し)

返値    d0.l    変更前のアドレス(ROM IOCS version 1.3 のみ)

    　エスケープシーケンスのうち、ESC[> 系の拡張処理を行うサブルーチンのアドレ
    スを設定する。処理アドレスに0を指定すると標準アドレスが設定される。

    　設定したアドレスが呼び出される時は、d0.w に ESC[> の次の2バイトデータ、
    a0.l に ESC[> のアドレスがセットされている。

    　ROM IOCS version 1.3 のみ、変更前のアドレスを返す。

    　Human68k が使用しており、それにより下記のエスケープシーケンスが追加され
    る。
        ESC [6n         ESC [>1l        ESC [>1h

非公式情報
    コール名 _EXESC
    参考: https://stdkmd.net/udcx68k/#iocs_exesc

==============================================================================

$38     _SETFNTADR      外字フォントアドレス設定

　外字フォントデータのアドレスを設定または取得する。

　引数 d2.l (外字グループ番号)により動作モードが切り替わる。
    d2.l = 0～15 ……………………… 外字フォントデータのアドレスを設定する
    d2.l = 0～15  + $8000_0000 …… 外字フォントデータのアドレスを取得する
    d2.l = $0000_0080 …… 拡張外字処理アドレスへのポインタを取得する

　なお、IOCS.X、HIOCS.X 組み込み時は d2.l の下位ワードのみが外字グループ番号と
して扱われる。

d2.l = 0～15 …… 外字フォントデータのアドレスを設定する
    　外字フォントデータのアドレスを設定し、以前の設定アドレスを返す。

    引数    d1.l    フォントアドレス
            d2.l    外字グループ番号
                                       Shift-JIS        JIS     ROM IOCS HIOCS
                 0  外字A(16x16)     $869f～$879e  $2c21～$2d7e  X    X    X
                 1  外字B(16x16)     $eb9f～$ec9e  $7621～$777e  X    X    X
                 2  半角外字(8x16)   $f400～$f5ff                X    X    X
                 3  外字A(24x24)     $869f～$879e  $2c21～$2d7e  X    X    X
                 4  外字B(24x24)     $eb9f～$ec9e  $7621～$777e  X    X    X
                 5  半角外字(12x24)  $f400～$f5ff                X    X    X
                 6  半角(6x12)                                        X    X
                 7  1/4角(8x8)                                        X    X
                 8  半角(8x16)                                        X    X
                 9  全角(16x16)                                       X    X
                10  1/4角(12x12)                                      X    X
                11  半角(12x24)                                       X    X
                12  全角(24x24)                                       X    X
                13  全角非漢字(16x16)                                      X
                14  第1水準文字(16x16)                                     X
                15  第2水準文字(16x16)                                     X

    返値    d0.l    変更前のアドレス
                    -1ならエラー(外字グループ番号がおかしいか、奇数アドレスが
                    指定された)。

    　引数 d2.l の外字グループ番号は IOCS 環境により指定できる値が異なる。ROM
    IOCS では 0～5、IOCS.X 組み込み時は 0～12、HIOCS.X 組み込み時は 0～15。

    　ROM IOCS では引数 d1.l のフォントアドレスに奇数アドレスを設定してもエラ
    ーにならないので注意すること。

d2.l = 0～15  + $8000_0000 …… 外字フォントデータのアドレスを取得する
    　外字フォントデータのアドレスを返す。ROM IOCS では使用できず、IOCS.X また
    は HIOCS.X 組み込み時のみ有効。

    引数    d2.l    外字グループ番号 + $8000_0000
                    使用できる値については前項を参照のこと。

    返値    d0.l    データアドレス

d2.l = $0000_0080 …… 拡張外字処理アドレスへのポインタを取得する
    　拡張外字処理を行うアドレスを保持する1ロングワードのワークへのポインタを
    返す。ROM IOCS では使用できず、IOCS.X または HIOCS.X 組み込み時のみ有効。

    引数    d2.l = $0080_0000

    返値    d0.l    拡張外字処理アドレスへのポインタ

非公式情報
    コール名 _CHR_ADR
    参考: https://stdkmd.net/udcx68k/#iocs_chr_adr

==============================================================================

$39     (未公開)        BEEP 音用 PCM のデータ設定

引数    d1.l    PCM データアドレス
        d2.w    PCM データサイズ

返値    d0.l    常に0
        d1.l    変更前の PCM データアドレス
        d2.w    変更前の PCM データサイズ

    　BEEP 音用の PCM データのアドレスと長さを設定する。

非公式情報
    コール名 _SETBEEP
    参考: https://stdkmd.net/udcx68k/#iocs_setbeep

==============================================================================

$3a     (未公開)        プリンタパラメータ設定

引数    a1.l    パラメータアドレス(0 で ROM)

    　プリンタ処理 IOCS で使用するパラメータを設定する。

    　パラメータアドレスに 0 を指定すると ROM 内の初期値を設定する。

    　パラメータの内容は以下の通り。

offset  size
$00     1.l     T-VRAM プレーン 0 アドレス($e00000)
$04     1.w     Y 方向ドット数÷12-1(41)
$06     1.l     拡大ビットイメージ出力時の Y 方向余りラインパターン
$0a     1.w     Y 方向ドット数÷24-1(21)
$0c     1.l     縮小ビットイメージ出力時の Y 方向余りラインパターン
$10     1.w     X 方向ドット数÷ 8-1(96)
$12     8.b     漢字モード指定コード
$1a     8.b     漢字モード解除コード
$22     4.b     LF のコード
$26     6.b     改行幅 16/120インチのコード
$2c     6.b     改行幅を電源投入時の状態に戻すコード
$32     6.b     改行幅 10/120インチのコード
$38     6.b     改行幅  5/150インチのコード
$3e     8.b     ビットイメージ出力コード(1536×24ドット出力)
$46     8.b     ビットイメージ出力コード( 768×24ドット出力)
$4e     8.b     ビットイメージ出力コード(  18×24ドット出力)
$56     8.b     ビットイメージ出力コード(  36×24ドット出力)
$5e     1.b     0:MSB～LSB 1:LSB～MSB の順で出力
$5f     1.b     半角ビットイメージ出力時の左右の空白ドット数
$60     1.b     全角ビットイメージ出力時の左右の空白ドット数
$61     1.b     モード(bitの値が1ならビットイメージで出力する)
                bit 4:半角文字
                bit 3:第一水準漢字及び全角非漢字
                bit 2:第二水準漢字
                bit 1:第一外字
                bit 0:第二外字

    　$06、$0c は下位3バイトのみ有効で、左端から 512/($04,$0a の値)の余りのド
    ット数だけビットを1にする。

    　$12～$56 のコードは、先頭1バイトでコードのバイト数を指定し、残りでコード
    を指定する。

    　なお、$22 からの LF コード指定バッファは PRNDRVn.SYS を組み込むとサイズ
    が2バイトに縮まり、$24 から CR のコードを指定するようになっている。

非公式情報
    コール名 _SETPRN
    参考: https://stdkmd.net/udcx68k/#iocs_setprn

==============================================================================

$3b     _JOYGET         ジョイスティック入力

引数    d1.w    ジョイスティック番号(0、1)

返値    d0.l    ジョイスティックデータ
                bit 31～8  常に %0
                bit     7  常に %1
                bit     6  ボタン B (押していれば %0、そうでなければ %1)
                bit     5  ボタン A (押していれば %0、そうでなければ %1)
                bit     4  常に %1
                bit     3  レバー 右 (入力ありで %0、そうでなければ %1)
                bit     2  レバー 左 (入力ありで %0、そうでなければ %1)
                bit     1  レバー 下 (入力ありで %0、そうでなければ %1)
                bit     0  レバー 上 (入力ありで %0、そうでなければ %1)

        ジョイスティックのデータを読む。
        無効なジョイスティック番号を指定した場合は、0 が返る。

==============================================================================

$3c     _INIT_PRN       プリンタ初期化

引数    d1.hb   1 ページの行数-1(-1で指定なし)
        d1.b    1 行の桁数-1    (     〃     )

返値    d0.l =  0       出力不可能
                $20     出力可能

        プリンタポートを初期化し、同時にプリンタに出力可能か調べる。
        引数の d1.w は IOCS _OUTPRN($3f) 用のプリントフォーマット。

==============================================================================

$3d     _SNSPRN         プリンタに出力可能か検査する

返値    d0.l =  0       出力不可能
                $20     出力可能

        プリンタに出力可能か調べる。

==============================================================================

$3e     _OUTLPT         プリンタ直接出力

引数    d1.b    出力データ

        プリンタに直接データを出力する。漢字処理はせず、また自動改行/改頁しな
        い。通常はプリンタに出力が完了するまで処理が戻らない。
        アクセラレータ等による高速動作中は、ウェイト不足で正常動作しない場合が
        ある。

==============================================================================

$3f     _OUTPRN         プリンタ出力

引数    d1.b    出力データ

返値    d1.b は破壊される。

        プリンタに文字を出力する。漢字処理は S-JIS で行い、2 バイト文字の場合は
        1 バイトずつ 2 回に分けて出力すること。
        通常はプリンタに出力が完了するまで処理が戻らない。

==============================================================================

$40     _B_SEEK         ディスクのシーク

引数    d1.hb   PDA
                d1.hb = $10～$13        2DD/8   0～ 3
                        $30～$33        2DD/9   〃
                        $70～$73        2HQ     〃
                        $80～$8f        SASI-HD 0～15
                        $90～$93        2HD     0～ 3
        d1.b    モード(SASI-HD の時は意味がありません)
                bit 6   MFM/MFM モード切り換え  0:FM    1:MFM(通常は 1)
                bit 5   リトライ                0:リトライしない        1:する
                bit 4   シーク                  0:シークしない          1:する
                リトライする場合、5 回シークせずにリトライし、その後 5 回
                リキャリブレート/シークをしてからリトライします。
        d2.l    目的シーク位置(SASI-HD の時は 256 バイト単位のレコード番号)
                bit 31～24      セクタ長
                                0:128   1:256   2:512   3:1024(バイト)
                bit 23～16      トラック(0～76)
                bit 15～ 8      サイド(0/1)
                bit  7～ 0      セクタ(1～8)

返値    SASI-HD : ステータス
                d0.l =  正数    正常終了
                        -1      規定時間内に応答がなかった
                        -3      エラー
                        その他  異常終了(最下位バイトがエラーコード)
        2HD-FD  : FDC ステータス
                bit 31～24      リザルトステータス 0(ST0)
                bit 23～16      コマンド終了時のシリンダ番号(PCN)

        ディスクの指定位置までシークする。
        SASI-HD のシークで返値が $ffffff?? の場合、$?? はセンスバイトの先頭バ
        イトを示す。
        PDA の $10～13、$30～$33、$70～$73 は ROM IOCS version 1.3 若しくは
        FDDEVICE.X 常駐時のみ使用可能。また、ROM IOCS version 1.3 の場合、
        SASI-HD は SCSI に接続されているのものが対象となる。

==============================================================================

$41     _B_VERIFY       ディスクのベリファイ

引数    d1.hb   PDA
        d1.b    モード(SASI-HD の時は意味がありません)
        d2.l    目的検査位置
        d3.l    検査するバイト数
        a1.l    検査するデータのアドレス

返値    d2/d3/a1 は内容が保証されない。
        SASI-HD : ステータス(負数で異常終了)
                d0.l =  正数    正常終了
                        -1      規定時間内に応答がなかった
                        -2      データが不一致
                        -3      エラー
                        その他  異常終了(最下位バイトがエラーコード)
        2HD-FD  : FDC ステータス(-1 でパラメータが異常)
                bit 31～24      リザルトステータス 0(ST0)
                bit 23～16              〃         1(ST1)
                bit 15～ 8              〃         2(ST2)
                bit  7～ 0      シリンダ番号(C)

        データの比較検査を行なう。

        2HD-FD との比較の場合、FDC の SCAN EQUAL 命令を使用してデータの比較を
        行うので、データが $ff である時はそのバイトの比較は行われずに等しいも
        のとして扱われる。

==============================================================================

$42     _B_READDI       ディスクの診断の為の読み出し

引数    d1.hb   PDA(SASI-HD:$80～$8f は指定出来ません)
        d1.b    モード
        d2.l    目的読み込み位置
        d3.l    読み込むバイト数
        a1.l    読み込むバッファのアドレス

返値    d2/d3/a1 は内容が保証されない。
        FDC ステータス(-1 でパラメータが異常)
                bit 31～24      リザルトステータス 0(ST0)
                bit 23～16              〃         1(ST1)
                bit 15～ 8              〃         2(ST2)
                bit  7～ 0      シリンダ番号(C)

        2HD の診断の為のディスク読み出しをする。通常の読み込みでは使わない。

==============================================================================

$43     _B_DSKINI       ドライブの初期化

引数    d1.hb   PDA
        d2.l    モーターオフまでの時間(SASI-HD の時は意味がありません)
        a1.l    SASI-HD : アサインドライブパラメータのデータアドレス
                2HD-FD  : SPECIFY コマンドのデータアドレス

返値    SASI-HD : ステータス(負数で異常終了)
        2HD-FD の時は意味がありません。

        ドライブを初期化する。
        モーターオフまでの時間は 1/100 秒単位で、0 を指定すると標準値(2 秒)に
        なる。a1.l に 0 を指定すると、標準の設定(SPECIFY データ)が使用される。

==============================================================================

$44     _B_DRVSNS       ドライブの状態検査

引数    d1.hb   PDA

返値    SASI-HD : ステータス(負数で異常終了)
        2HD-FD  : FDC ステータス
                bit 31～24      リザルトステータス 3(ST3)
                bit 23～ 0      不定

        ディスクの状態を調べる。

==============================================================================

$45     _B_WRITE        ディスクへの書き込み

引数    d1.hb   PDA
        d1.b    モード(SASI-HD の時は意味がありません)
        d2.l    目的書き込み位置
        d3.l    書き込むバイト数
        a1.l    書き込むデータのアドレス

返値    d2/d3/a1 は内容が保証されない。
        SASI-HD : ステータス(負数で異常終了)
        2HD-FD  : FDC ステータス(-1 でパラメータが異常)
                bit 31～24      リザルトステータス 0(ST0)
                bit 23～16              〃         1(ST1)
                bit 15～ 8              〃         2(ST2)
                bit  7～ 0      シリンダ番号(C)

        ディスクにデータを書き込む。
        注意:OS が行っているバッファリング処理とは無関係に動作するので、OS が
        バッファ中にデータを保持している場合、ディスク上のデータは内容が保証さ
        れない場合がある。

==============================================================================

$46     _B_READ         ディスクからの読み込み

引数    d1.hb   PDA
        d1.b    モード(SASI-HD の時は意味がありません)
        d2.l    目的読み込み位置
        d3.l    読み込むバイト数
        a1.l    読み込むバッファのアドレス

返値    d2/d3/a1 は内容が保証されない。
        SASI-HD : ステータス(負数で異常終了)
        2HD-FD  : FDC ステータス(-1 でパラメータが異常)
                bit 31～24      リザルトステータス 0(ST0)
                bit 23～16              〃         1(ST1)
                bit 15～ 8              〃         2(ST2)
                bit  7～ 0      シリンダ番号(C)

        ディスクからデータを読み込む。
        注意:OS が行っているバッファリング処理とは無関係に動作するので、OS が
        バッファ中にデータを保持している場合、ディスク上のデータは内容が保証さ
        れない場合がある。

==============================================================================

$47     _B_RECALI       ディスクのリキャリブレイト

引数    d1.hb   PDA
        d1.b    モード(SASI-HD の時は 0 にします)
                d1.b =  0       トラック 0 へのシーク
                        -1      強制レディ状態での検査

返値    SASI-HD : ステータス(負数で異常終了)
        2HD-FD  : FDC ステータス
                bit 31～24      リザルトステータス 0(ST0)
                bit 23～16      シリンダ番号(C)

        トラック 0 へのシーク若しくは強制レディ状態での検査を行なう。
        後者を実行後、ST0 の bit 4(EQUIPMENT CHECK) が 1 になっていた場合は
        指定のドライブは存在しない。
        2HD-FD の ドライブの有無はこの IOCS コールでしか検査出来ない。

==============================================================================

$48     _B_ASSIGN       ハードディスクの代替トラック設定

引数    d1.hb   PDA(2HD-FD:$90～$93 は指定できません)
        d2.l    レコード番号
        d3.l    インタリーブコード
        a1.l    代替トラック指定データのアドレス
                (0,a1)  代替トラック番号上位バイト
                (1,a1)          〃      中位〃
                (2,a1)          〃      下位〃
                (3,a1)  常に 0

返値    ステータス(負数で異常終了)

        ハードディスクの代替トラックを設定する。

==============================================================================

$49     _B_WRITED       2HD への破損データ書き込み

引数    d1.hb   PDA(SASI-HD:$80～$8f は指定出来ません)
        d1.b    モード
        d2.l    目的書き込み位置
        d3.l    書き込むバイト数
        a1.l    書き込むデータのアドレス

返値    d2/d3/a1 は内容が保証されない。
        FDC ステータス(-1 でパラメータが異常)
                bit 31～24      リザルトステータス 0(ST0)
                bit 23～16              〃         1(ST1)
                bit 15～ 8              〃         2(ST2)
                bit  7～ 0      シリンダ番号(C)

        ディスクに破損データを書き込む。通常の書き込みでは使わない。

==============================================================================

$4a     _B_READID       2HD の ID 情報の読み出し

引数    d1.hb   PDA(SASI-HD:$80～$8f は指定出来ません)
        d1.b    モード
        d2.l    目的読み出し位置(トラックとサーフェスの指定のみ)
                bit 31 を 1 にすると検出IDを収得する。

返値    d0.l    FDC ステータス
                bit 31～24      リザルトステータス 0(ST0)
                bit 23～16              〃         1(ST1)
                bit 15～ 8              〃         2(ST2)
                bit  7～ 0      シリンダ番号(C)
        d2.l    読み出したID(d2.l の bit 31=1 の時のみ)

        2HD-FD の ID 情報を読み出す。

==============================================================================

$4b     _B_BADFMT       ハードディスクの破損トラックを使用不能にする

引数    d1.hb   PDA(2HD-FD:$90～$93 は指定できません)
        d2.l    レコード番号
        d3.b    インタリーブコード(1 または 6)

返値    ステータス(負数で異常終了)

        ハードディスクの破壊トラックを使用不能にする。

==============================================================================

$4c     _B_READDL       2HD からの破損データ読み込み

引数    d1.hb   PDA(SASI-HD:$80～$8f は指定出来ません)
        d1.b    モード
        d2.l    目的読み込み位置
        d3.l    読み込むバイト数
        a1.l    読み込むバッファのアドレス

返値    d2/d3/a1 は内容が保証されない。
        FDC ステータス(-1 でパラメータが異常)
                bit 31～24      リザルトステータス 0(ST0)
                bit 23～16              〃         1(ST1)
                bit 15～ 8              〃         2(ST2)
                bit  7～ 0      シリンダ番号(C)

        ディスクから破損データを読み込む。通常の読み込みでは使わない。

==============================================================================

$4d     _B_FORMAT       ディスクのフォーマット

引数    d1.hb   PDA
        d1.b    モード(SASI-HD の時は意味がありません)
        d2.l    目的フォーマット位置(SASI-HD の時はレコード番号)
                bit 31～24      セクタ長
                                0:128   1:256   2:512   3:1024(バイト)
                bit 23～16      トラック(0～76)
                bit 15～ 8      サイド(0/1)
                bit  7～ 0      各セクタのデータ部に書き込む値
        d3.l    SASI-HD : インタリーブコード(1 または 6)
                2HD-FD  : ID データのバイト数
        a1.l    ID データのアドレス(SASI-HD の時は意味がありません)

返値    SASI-HD : ステータス(負数で異常終了)
        2HD-FD  : FDC ステータス(-1 でパラメータが異常)
                bit 31～24      リザルトステータス 0(ST0)
                bit 23～16              〃         1(ST1)
                bit 15～ 8              〃         2(ST2)
                bit  7～ 0      シリンダ番号(C)

        ディスクの物理フォーマットを行なう。
        2HD-FD のフォーマット時に使用する ID データの内容は、以下のテーブルを
        セクタ数だけ繰り返したもの。

offset  size
0       1.b     トラック番号
1       1.b     サイド(0/1)
2       1.b     セクタ番号
3       1.b     セクタ長(128x2バイト)

        通常トラック番号は 0～76、セクタ番号は 1～8、セクタ長は 0～3 になる。
        なお、d3.l のバイト数は実際には参照されないが、将来の拡張の為に必ずセ
        ットしておくこと。

==============================================================================

$4e     _B_DRVCHK       2HD ドライブの状態設定

引数    d1.hb   PDA(SASI-HD:$80～$8f は指定出来ません)
        d2.w    機能番号
                d2.w =  0       状態検査
                        1       排出(排出禁止状態では排出不可)
                        2       排出禁止 1
                        3        〃 許可 1
                        4       ディスクがセットされていない時 LED 点滅
                        5                       〃                 消灯
                        6       排出禁止 2(OS 用なのでユーザーは使用禁止)
                        7        〃 許可 2(〃)
                        8       排出検査  (〃)
                        9       状態検査 2

返値    d2.w = 0～7,9 の時、ディスクの状態
                bit 7   LED 点滅
                bit 6   排出禁止
                bit 5   排出禁止 2(OS バッファ有り)
                bit 4   〃       1(ユーザー指定)
                bit 3   書き込み禁止
                bit 2   ノットレディ
                bit 1   メディア挿入
                bit 0   メディア誤挿入
                ノットレディとライトプロテクトは d2.w = 0 の場合のみ有効。
                また、この時メディア未挿入なら両方のビットが 1 になる。
        d2.w = 8 の時、前回の検査後に排出したか(1:していない -1:した)

        2HD-FD の状態を参照/設定する。

==============================================================================

$4f     _B_EJECT        ディスクのイジェクト/シッピング

引数    d1.hb   PDA

返値    終了コード(負数なら異常終了)
        2HD-FD の時は意味がありません。

        2HD-FD を排出若しくは SASI-HD をシッピングする。
        排出禁止状態でも排出できるが、OS のバッファリング処理とは無関係に動作
        するので、OS がバッファ中にデータを保持している場合排出を行うとディス
        クの内容が保証されなくなるため、排出してはいけない。

==============================================================================

$50     _DATEBCD        日付データのバイナリ→BCD 変換

引数    d1.l    日付データ(バイナリ)
            $0y_yy_mm_dd
            bit 27～16: 年(1980～2079) バイナリ
            bit 15～ 8: 月(1～12) バイナリ
            bit  7～ 0: 日(1～31) バイナリ

返値    d0.l    変換後の日付データ(BCD)
            $uw_yy_mm_dd
            bit 31～28: 閏年カウンタ(0:今年が閏年 1:三年後 2:二年後 3:一年後)
            bit 27～24: 曜日カウンタ(0:日 1:月 2:火 3:水 4:木 5:金 6:土)
            bit 23～16: 年($00～$99) BCD 2桁
            bit 15～ 8: 月($01～$12) BCD 2桁
            bit  7～ 0: 日($01～$31) BCD 2桁
        　ただし、日付が異常な場合は -1 が返る。

    　日付をバイナリから BCD に変換する。
    　閏年カウンタは、年カウンタとともに加算される。

==============================================================================

$51     _DATESET        日付の設定

引数    d1.l    日付データ(BCD)
            $uw_yy_mm_dd
            bit 31～28: 閏年カウンタ(0:今年が閏年 1:三年後 2:二年後 3:一年後)
            bit 27～24: 曜日カウンタ(0:日 1:月 2:火 3:水 4:木 5:金 6:土)
            bit 23～16: 年($00～$99) BCD 2桁
            bit 15～ 8: 月($01～$12) BCD 2桁
            bit  7～ 0: 日($01～$31) BCD 2桁

返値    d0.l    常に0

    　時計に日付を設定する。ただし、正しい日付の指定であるかは検査されない。
    　X680x0 のクロック IC(RTC) は BCD 形式のデータを設定しなければならないの
    で、IOCS _DATEBCD($50) でバイナリの日付を BCD に変換した後にこのコールで設
    定する。

==============================================================================

$52     _TIMEBCD        時刻データのバイナリ→BCD 変換

引数    d1.l    時刻データ(バイナリ)
            $00_hh_mm_ss
            bit 23～16: 時(0～23) バイナリ
            bit 15～ 8: 分(0～59) バイナリ
            bit  7～ 0: 秒(0～59) バイナリ

返値    d0.l    時刻データ(BCD)
            $0t_hh_mm_ss
            bit 27～24: $1(システム規定:24時間計であることを表す)
            bit 23～16: 時($00～$23) BCD 2桁
            bit 15～ 8: 分($00～$59) BCD 2桁
            bit  7～ 0: 秒($00～$59) BCD 2桁
        　ただし、時刻が異常な場合は-1が返る。

    　時刻をバイナリから BCD に変換する。

==============================================================================

$53     _TIMESET        時刻の設定

引数    d1.l    時刻データ(BCD)
            $0t_hh_mm_ss
            bit 27～24: $0:12時間計 $1:24時間計
            bit 23～16: 時($00～$23) BCD 2桁
            bit 15～ 8: 分($00～$59) BCD 2桁
            bit  7～ 0: 秒($00～$59) BCD 2桁

返値    d0.l    常に0

    　時計に時刻を設定する。ただし、正しい時刻の指定であるかは検査されない。

==============================================================================

$54     _DATEGET        日付の読み込み

返値    d0.l    日付データ(BCD)
            $0w_yy_mm_dd
            bit 27～24: 曜日カウンタ(0:日 1:月 2:火 3:水 4:木 5:金 6:土)
            bit 23～16: 年($00～$99) BCD 2桁
            bit 15～ 8: 月($01～$12) BCD 2桁
            bit  7～ 0: 日($01～$31) BCD 2桁

    　時計から日付を読み込む。

不具合
    該当環境: ROM IOCS 全バージョン
    　日が $19 → $20、$29 → $30、$28～$30 → $01 に代わる瞬間に呼び出すと間
    違った値を返すことがある。
    参考: https://twitter.com/kamadox/status/1659893325149925379

==============================================================================

$55     _DATEBIN        日付データの BCD→バイナリ変換

引数    d1.l    日付データ(BCD)
            $0w_yy_mm_dd
            bit 27～24: 曜日カウンタ(0:日 1:月 2:火 3:水 4:木 5:金 6:土)
            bit 23～16: 年($00～$99) BCD 2桁
            bit 15～ 8: 月($01～$12) BCD 2桁
            bit  7～ 0: 日($01～$31) BCD 2桁

返値    d0.l    変換後の日付データ(バイナリ)
            $wy_yy_mm_dd
            bit 31～28: 曜日カウンタ(0:日 1:月 2:火 3:水 4:木 5:金 6:土)
            bit 27～16: 年(1980～2079) バイナリ
            bit 15～ 8: 月(1～12) バイナリ
            bit  7～ 0: 日(1～31) バイナリ

    　日付データを BCD からバイナリに変換する。

==============================================================================

$56     _TIMEGET        時刻の読み込み

返値    d0.l    時刻データ(BCD)
            $0t_hh_mm_ss
            bit 27～24: $0:12時間計 $1:24時間計
            bit 23～16: 時($00～$23) BCD 2桁
            bit 15～ 8: 分($00～$59) BCD 2桁
            bit  7～ 0: 秒($00～$59) BCD 2桁

    　時計から時刻を読み込む。

不具合
    該当環境: ROM IOCS 全バージョン
    　秒が $19 → $20、$29 → $30、……、$59 → $00 に代わる瞬間に呼び出すと間
    違った値を返すことがある。
    参考: https://twitter.com/kamadox/status/1659893325149925379

==============================================================================

$57     _TIMEBIN        時刻データの BCD→バイナリ変換

引数    d1.l    時刻データ(BCD)
            $00_hh_mm_ss
            bit 23～16: 時($00～$23) BCD 2桁
            bit 15～ 8: 分($00～$59) BCD 2桁
            bit  7～ 0: 秒($00～$59) BCD 2桁

返値    d0.l    変換後の時刻データ(バイナリ)
            $00_hh_mm_ss
            bit 23～16: 時(0～23) バイナリ
            bit 15～ 8: 分(0～59) バイナリ
            bit  7～ 0: 秒(0～59) バイナリ

    　時刻データを BCD からバイナリに変換する。

==============================================================================

$58     _DATECNV        日付データの文字列→バイナリ変換

引数    a1.l    日付を表す文字列のアドレス
                形式は 'yyyy/mm/dd',0 または 'yy-mm-dd',0
                (区切りは '/' と '-' のどちらでもよい)

返値    d0.l    変換後の日付データ(バイナリ)
                ただし、日付を表す文字列が異常な場合は d0.l = -1 が返る。
        a1.l    文字列末尾(変換に失敗した場合、内容は保証されない)

    　日付データを文字列からバイナリに変換する。ただし、正しい日付の指定である
    かは検査されない。年が80～99、0～79である時は下二桁の指定と見なしてそれぞ
    れ1900、2000を足した値を返す。
    　数値の先頭にある空白と '0' は読み飛ばされる。区切りは実際にはどの記号を
    使用しても正常に動作する。

==============================================================================

$59     _TIMECNV        時刻データの文字列→バイナリ変換

引数    a1.l    時刻を表す文字列のアドレス(区切りは ':' のみ)
                形式は 'hh:mm:ss',0

返値    d0.l    変換後のデータ(バイナリ)
                ただし、時刻を表す文字列が異常な場合は d0.l = -1 が返る。
        a1.l    文字列末尾(変換に失敗した場合、内容は保証されない)

    　時刻データを文字列からバイナリに変換する。
    　数値の先頭にある空白と '0' は読み飛ばされる。区切りは実際にはどの記号を
    使用しても正常に動作する。

==============================================================================

$5a     _DATEASC        日付データのバイナリ→文字列変換

引数    d1.l    日付データ(バイナリ)
            $fy_yy_mm_dd
            bit 31～28: 文字列形式
                          0: 'yyyy/mm/dd',0
                          1: 'yyyy-mm-dd',0
                          2: 'yy/mm/dd',0
                          3: 'yy-mm-dd',0
            bit 27～16: 年(1980～2079) バイナリ
            bit 15～ 8: 月(1～12) バイナリ
            bit  7～ 0: 日(1～31) バイナリ
        a1.l    文字列バッファのアドレス

返値    d0.l    ステータス(0:正常終了 -1:エラー)
        a1.l    文字列終端の0のアドレス

    　日付データをバイナリから文字列に変換する。
    　文字列バッファは9または11バイト以上必要。

==============================================================================

$5b     _TIMEASC        時刻データのバイナリ→文字列変換

引数    d1.l    時刻データ(バイナリ)
            $00_hh_mm_ss
            bit 23～16: 時(0～23) バイナリ
            bit 15～ 8: 分(0～59) バイナリ
            bit  7～ 0: 秒(0～59) バイナリ
        a1.l    文字列バッファのアドレス(形式は 'hh:mm:ss',0)

返値    d0.l    ステータス(0:正常終了 -1:エラー)
        a1.l    文字列終端の0のアドレス

    　時刻データをバイナリから文字列に変換する。
    　文字列バッファは9バイト以上必要。

==============================================================================

$5c     _DAYASC         曜日データのバイナリ→文字列変換

引数    d1.l    曜日データ(0:日 1:月 2:火 3:水 4:木 5:金 6:土)
        a1.l    文字列バッファのアドレス(形式は '？',0)

返値    d0.l    常に0
        a1.l    文字列終端の0のアドレス

    　曜日データをバイナリから文字列に変換する。
    　文字列バッファは3バイト以上必要。

==============================================================================

$5d     _ALARMMOD       アラーム許可/禁止

引数    d1.l    アラームの設定
                d1.l =  0       禁止
                        1       許可
                        2       現在の状態を調べる

返値    現在の状態(0/1)

        アラームの禁止/許可を設定する。設定は SRAM に記録される。

==============================================================================

$5e     _ALARMSET       アラーム設定

引数    d1.l    アラーム時間
                $0wddhhmm
                bit 27～24      曜日(0:日曜日 1:月曜日 … 6:土曜日 $f:無指定)
                bit 23～16      日($01～$31,$ff:無指定) BCD 2桁
                bit 15～ 8      時($00～$23,$ff:無指定) BCD 2桁
                bit  7～ 0      分($00～$59,$ff:無指定) BCD 2桁
        d2.l    電源オフまでの時間(分)
        a1.l    テレビコントロールコード若しくは処理アドレス
                a1.l =  -1      ディスプレイ制御しない
                        0       ディスプレイ電源オン/コンピュータモード
                        1～$3f  指定の数値でテレビコントロール
                        その他  処理アドレス(偶数アドレスかつ先頭の一バイトが
                                $60:bra であること)

返値    常に 0

        アラーム時間と処理内容を設定し、アラームを許可する。設定は SRAM に記録
        される。
        曜日を $f、日/時/分を $ff にすると、それぞれが無指定になる。ただし、全
        てを無指定にしないこと。
        電源オフまでの時間に 0 を指定すると、電源オフしない。

==============================================================================

$5f     _ALARMGET       アラームの設定状態を収得

返値    d0.l    処理アドレス
        d1.l    アラーム時間
        d2.l    電源オフまでの時間(分)

        アラーム時間と処理内容を調べる。

==============================================================================

$60     _ADPCMOUT       ADPCM 出力

引数    d1.w    ウェイトモード/周波数/出力モード
                bit     15      ウェイトモード(0:通常 1:ノーウェイト)
                bit 10～ 8      サンプリング周波数(0:3.9kHz 1:5.2kHz 2:7.8kHz
                                                        3:10.4kHz 4:15.6kHz)
                bit  1～ 0      出力モード(0:なし 1:左 2:右 3:左右)
        d2.l    再生データのバイト数
        a1.l    〃          アドレス

返値    d0/d2/a1 は内容が保証されない。

        ADPCM を再生する。データが $ff00 バイト以下の場合はすぐに戻る。
        DMA が使用不可能であれば、使用可能になるまで待つ。

==============================================================================

$61     _ADPCMINP       ADPCM 入力

引数    d1.w    ウェイトモード/周波数/出力モード
                bit     15      ウェイトモード(0:通常 1:ノーウェイト)
                bit 10～ 8      サンプリング周波数(0:3.9kHz 1:5.2kHz 2:7.8kHz
                                                        3:10.4kHz 4:15.6kHz)
                bit  1～ 0      出力モード(0:なし 1:左 2:右 3:左右)
        d2.l    録音バッファのバイト数
        a1.l    〃            アドレス

返値    d0/d2/a1 は内容が保証されない。

        ADPCM を録音する。データが $ff00 バイト以下の場合はすぐに戻る。
        DMA が使用不可能であれば、使用可能になるまで待つ。
        データ自体はモノラルで入力するが、モニタ出力を出力モードで指定出来る。

==============================================================================

$62     _ADPCMAOT       ADPCM 出力(アレイチェーン)

引数    d1.w    ウェイトモード/周波数/出力モード
                bit     15      ウェイトモード(0:通常 1:ノーウェイト)
                bit 10～ 8      サンプリング周波数(0:3.9kHz 1:5.2kHz 2:7.8kHz
                                                        3:10.4kHz 4:15.6kHz)
                bit  1～ 0      出力モード(0:なし 1:左 2:右 3:左右)
        d2.l    チェーンテーブルの個数
        a1.l            〃        アドレス

        アレイチェーンによって ADPCM を再生する。
        DMA が使用不可能であれば、使用可能になるまで待つ。
        アレイチェーンテーブルの内容は、以下のチェーンテーブルを繰り返したもの。

offset  size
0       1.l     再生データのアドレス
4       1.w     〃          バイト数(1～$ffff)

==============================================================================

$63     _ADPCMAIN       ADPCM 入力(アレイチェーン)

引数    d1.w    ウェイトモード/周波数/出力モード
                bit     15      ウェイトモード(0:通常 1:ノーウェイト)
                bit 10～ 8      サンプリング周波数(0:3.9kHz 1:5.2kHz 2:7.8kHz
                                                        3:10.4kHz 4:15.6kHz)
                bit  1～ 0      出力モード(0:なし 1:左 2:右 3:左右)
        d2.l    チェーンテーブルの個数
        a1.l            〃        アドレス

        アレイチェーンによって ADPCM を録音する。
        DMA が使用不可能であれば、使用可能になるまで待つ。
        アレイチェーンテーブルの内容は、以下のチェーンテーブルを繰り返したもの。

offset  size
0       1.l     録音バッファのアドレス
4       1.w     〃            バイト数(1～$ffff)

==============================================================================

$64     _ADPCMLOT       ADPCM 出力(リンクアレイチェーン)

引数    d1.w    ウェイトモード/周波数/出力モード
                bit     15      ウェイトモード(0:通常 1:ノーウェイト)
                bit 10～ 8      サンプリング周波数(0:3.9kHz 1:5.2kHz 2:7.8kHz
                                                        3:10.4kHz 4:15.6kHz)
                bit  1～ 0      出力モード(0:なし 1:左 2:右 3:左右)
        a1.l    チェーンテーブルのアドレス

        リンクアレイチェーンによって ADPCM を再生する。
        DMA が使用不可能であれば、使用可能になるまで待つ。
        リンクアレイチェーンテーブルの内容は、以下のチェーンテーブルを連結した
        もの。

offset  size
0       1.l     再生データのアドレス
4       1.w     〃          バイト数(1～$ffff)
6       1.l     次のテーブルのアドレス(0 でテーブルの終わり)

==============================================================================

$65     _ADPCMLIN       ADPCM 入力(リンクアレイチェーン)

引数    d1.w    ウェイトモード/周波数/出力モード
                bit     15      ウェイトモード(0:通常 1:ノーウェイト)
                bit 10～ 8      サンプリング周波数(0:3.9kHz 1:5.2kHz 2:7.8kHz
                                                        3:10.4kHz 4:15.6kHz)
                bit  1～ 0      出力モード(0:なし 1:左 2:右 3:左右)
        a1.l    チェーンテーブルのアドレス

        リンクアレイチェーンによって ADPCM を録音する。
        DMA が使用不可能であれば、使用可能になるまで待つ。
        リンクアレイチェーンテーブルの内容は、以下のチェーンテーブルを連結した
        もの。

offset  size
0       1.l     録音バッファのアドレス
4       1.w     〃            バイト数(1～$ffff)
6       1.l     次のテーブルのアドレス(0 でテーブルの終わり)

==============================================================================

$66     _ADPCMSNS       ADPCM 状態検査

返値    実行状態
        d0.l =  $00     何も実行していない
                $02     IOCS _ADPCMOUT($60) を実行中
                $04     IOCS _ADPCMINP($61) 〃
                $12     IOCS _ADPCMAOT($62) 〃
                $14     IOCS _ADPCMAIN($63) 〃
                $22     IOCS _ADPCMLOT($64) 〃
                $24     IOCS _ADPCMLIN($65) 〃

        ADPCM の実行状態を調べる。

==============================================================================

$67     _ADPCMMOD       ADPCM 実行制御

引数    d1.b    制御内容(0:終了 1:中断 2:再開)

返値    d0.l =  0       正常終了
                -1      制御モードが不正

        ADPCM の実行を制御する。
        ROM IOCS では、ショートカットで呼び出すと割り込み禁止状態になったまま
        で帰るので注意すること。

==============================================================================

$68     _OPMSET         OPM レジスタ設定

引数    d1.b    レジスタ番号
        d2.b    データ

返値    d2.b は破壊される。

        OPM に書き込める状態になるまで待ってから、レジスタにデータを書き込む。
        レジスタ $1b に書き込む場合、汎用出力のモードは変更できない。

==============================================================================

$69     _OPMSNS         OPM 状態検査

返値    d0.b    ステータス
                bit 7   Busy フラグ(0 で書き込み可能)
                bit 1   タイマ A オーバーフロー(1 の時オーバーフローが発生)
                bit 0     〃   B 〃

        OPM のステータスを読み込む。

==============================================================================

$6a     _OPMINTST       OPM 割り込み設定

引数    a1.l    処理アドレス(0 で割り込み禁止)

返値    d0.l =  0       割り込みを設定/禁止した
                その他  すでに使用中

        OPM による割り込みを設定する。MFP のみ制御するので、OPM に対しても設定
        する必要がある。
        ROM IOCS version 1.3 では、ショートカットで呼び出すと割り込みが全て禁
        止された状態で帰るので注意すること。
        割り込みの処理アドレスが $01000000 以上(最上位バイトが 0 以外)で割り込
        みが未使用と見なされるが、ROM IOCS version 1.3 で vbr が有効になってい
        る場合は処理アドレスが $00ff0770 の時のみ未使用と見なされる。

==============================================================================

$6b     _TIMERDST       Timer-D 割り込み設定

引数    d1.hb   単位時間
                1:1.0 2:2.5 3:4.0 4:12.5 5:16.0 6:25.0 7:50.0(μ秒単位)
        d1.b    カウンタ(0 の時は 256 として扱う)
        a1.l    処理アドレス(0 で割り込み禁止)

返値    d0.l =  0       割り込みを設定/禁止した
                その他  すでに使用中

        Timer-D による割り込みを設定する。割り込み周期は単位時間×カウンタ。
        CONFIG.SYS で PROCESS を設定している場合は、割り込みを変更出来ない。
        ROM IOCS version 1.3 では、ショートカットで呼び出すと割り込みが全て禁
        止された状態で帰るので注意すること。
        割り込みを未使用と見なす条件は _OPMINTST と同じ。

==============================================================================

$6c     _VDISPST        垂直同期(Timer-A)割り込み設定

　垂直同期割り込みを設定または禁止する。実際には Timer-A に割り込みを設定して
いる。

　ROM IOCS version 1.3 では、ショートカットで呼び出すと割り込みが全て禁止され
た状態で帰るので注意すること。

　引数 a1.l により動作モードが切り替わる。
    a1.l = 0以外 …… 割り込みを設定する
    a1.l = 0 ………… 割り込みを禁止する

a1.l = 0以外 …… 割り込みを設定する

    引数    d1.hb   割り込み期間(0:垂直帰線期間 1:垂直表示期間)
            d1.b    カウンタ(0 の時は 256 として扱う)
            a1.l    処理アドレス

    返値    d0.l =  0      割り込みを設定した
                 =  0以外  エラー(割り込みはすでに使用中だった)

    　割り込みを未使用と見なす条件は _OPMINTST と同じ。

    不具合
        該当環境: ROM IOCS 全バージョン
        修正環境: countpt.x
        　ROM IOCS ではタイマーを停止せずに MFP を設定していることが原因で、初
        回の割り込み発生までの期間が正しく反映されない。よくあるケースは、
        X680x0 起動直後に設定したら初回発生が非常に遅い、というものである。
        参考: https://stdkmd.net/bugsx68k/#rom_vdispst

a1.l = 0 …… 割り込みを禁止する

    引数    a1.l = 0

    返値    d0.l =  0       割り込みを禁止した

参考データ
    　IOCS _CRTMOD の画面モード別のおおよその秒間発生回数(実測値、d1.b = 1)を
    以下に示す。モード 19 以降は未計測。

        0,2,4,6,8,10,12,14,16 (31kHz)       約 55.46 回
        1,5,9,13  (15kHz インタレース)      約 61.34 回
        3,7,11,15 (15kHz ノンインタレース)  約 61.46 回
        17 (24kHz ノンインタレース)         約 53.12 回
        18 (24kHz インタレース)             約 53.06 回

==============================================================================

$6d     _CRTCRAS        ラスター割り込み設定

引数    d1.w    ラスタ番号
        a1.l    処理アドレス(0 で割り込み禁止)

返値    d0.l =  0       割り込みを設定した
                その他  すでに使用中

        ラスタ走査による割り込みを設定する。
        CRTC が指定のラスタを走査開始すると割り込みが発生する。
        ROM IOCS version 1.3 では、ショートカットで呼び出すと割り込みが全て禁
        止された状態で帰るので注意すること。
        割り込みを未使用と見なす条件は _OPMINTST と同じ。

==============================================================================

$6e     _HSYNCST        水平同期割り込み設定

引数    a1.l    処理アドレス(0 で割り込み禁止)

返値    d0.l =  0       割り込みを設定した
                その他  すでに使用中

        水平同期による割り込みを設定する。
        水平同期信号の立ち下がり時に割り込みが発生する。
        ROM IOCS version 1.3 では、ショートカットで呼び出すと割り込みが全て禁
        止された状態で帰るので注意すること。
        割り込みを未使用と見なす条件は _OPMINTST と同じ。

==============================================================================

$6f     _PRNINTST       プリンタ割り込み設定

引数    a1.l    処理アドレス(0 で割り込み禁止)

返値    d0.l =  0       割り込みを設定した
                その他  すでに使用中

        プリンタによる割り込みを設定する。
        プリンタがデータを受け取ることが可能になった時に割り込みが発生する。
        ROM IOCS version 1.3 では、ショートカットで呼び出すと割り込みが全て禁
        止された状態で帰るので注意すること。
        割り込みを未使用と見なす条件は _OPMINTST と同じ。

==============================================================================

$70     _MS_INIT        マウス初期化

        マウスを初期化する。

==============================================================================

$71     _MS_CURON       マウスカーソル表示

        マウスカーソルを表示する。

==============================================================================

$72     _MS_CUROF       マウスカーソル消去

        マウスカーソルを消去する。

==============================================================================

$73     _MS_STAT        マウスカーソルの表示状態を調べる

返値    d0.w =  0       マウスカーソルは表示されていない
                -1              〃      表示されている

        マウスカーソルの表示状態を調べる。

==============================================================================

$74     _MS_GETDT       マウス移動量/ボタン状態を調べる

返値    マウスの移動量及びボタンの状態
                bit 31～24      X 方向移動量
                bit 23～16      Y 〃
                bit 15～ 8      左ボタン(0:OFF -1:ON)
                bit  7～ 0      右〃    (〃         )

        マウスの移動量及びボタンの状態を調べる。

==============================================================================

$75     _MS_CURGT       マウスカーソルの座標収得

返値    マウスカーソルの座標
        d0.hw   X 座標
        d0.w    Y 〃

        マウスカーソルの座標を調べる。

==============================================================================

$76     _MS_CURST       マウスカーソルの座標設定

引数    マウスカーソルの座標
        d1.hw   X 座標
        d1.w    Y 〃

返値    d0.l =  0       座標が指定出来た
                -1      座標が異常

        マウスカーソルの座標を設定する。

==============================================================================

$77     _MS_LIMIT       マウスカーソルの移動範囲設定

引数    マウスカーソルの座標
        d1.hw   左端 X 座標
        d1.w    上端 Y 〃
        d2.hw   右端 X 座標
        d2.w    下端 Y 〃

返値    d0.l =  0       座標が指定出来た
                -1      座標が異常

        マウスカーソルの移動範囲を設定する。

==============================================================================

$78     _MS_OFFTM       マウスのボタンを離すまでの時間を調べる

引数    d1.w    ボタンの指定(0:左ボタン -1:右ボタン)
        d2.w    待ち時間(0 の時は離すまで待つ)

返値    d0.w =  0       ドラッグ
                -1      待ち時間の最大値を超えた
                その他  待ち時間

        マウスのボタンを離すまでの時間を調べる。

==============================================================================

$79     _MS_ONTM        マウスのボタンを押すまでの時間を調べる

引数    d1.w    ボタンの指定(0:左ボタン -1:右ボタン)
        d2.w    待ち時間(0 の時は押すまで待つ)

返値    d0.w =  0       ドラッグ
                -1      待ち時間の最大値を超えた
                その他  待ち時間

        マウスのボタンを押すまでの時間を調べる。

==============================================================================

$7a     _MS_PATST       マウスカーソルのパターン定義

引数    d1.w    カーソル番号(0～15)
        a1.l    パターンデータのアドレス

    マウスカーソルのパターンを定義する。
    マウスカーソルの大きさは16×16ドットで、1ドットが1ビットに対応する。パター
    ンデータの内容は以下の通り(カラーコード8～15は4～7より優先される)。

offset  size
0       1.w     パターンの左端 X 座標からマウス X 座標までの距離
2       1.w     パターンの上端 Y 座標からマウス Y 座標までの距離
4       16.w    マスクパターン(陰にするデータ)
36      16.w    マウスパターン(表示するデータ)

    パターンの左端/上端からマウス座標までの距離は、0(パターンの左隅/上隅をマウ
    ス座標にする)～15(パターンの右隅/下隅をマウス座標にする)で指定する。
    マスクパターンが0のドットはカラーコード4～7で表示され、1のドットは無視され
    る。
    マウスパターンが1のドットはカラーコード8～15で表示され、0のドットは無視さ
    れる。ただし、マスクパターンが0でマウスパターンが1の場合はカラーコード8～
    15が優先して表示される。

不具合
    該当環境: ROM IOCS version 1.1
    修正環境: IOCS.X
    マウスカーソル表示中に実行するとパターンが定義されず、$00000d70 の1ロング
    ワードに a1 レジスタの値が書き込まれる。
    参考: https://stdkmd.net/bugsx68k/#rom_mspatst

==============================================================================

$7b     _MS_SEL         マウスカーソルのパターン選択

引数    d1.w    カーソル番号(0～15)

        マウスカーソルのパターンを選択する。

==============================================================================

$7c     _MS_SEL2        マウスカーソルのアニメーション

引数    a1.l    カーソル番号テーブルのアドレス

        マウスパターンを複数個用いて、アニメーションで表示する。
        カーソル番号テーブルはカーソル番号をワードサイズで 6 個以下並べ、最後
        は -1 にする。

==============================================================================

$7d     _SKEY_MOD       ソフトキーボード制御

引数    d1.l    制御コード
                d1.l =  0       ソフトキーボード消去
                        1               〃      表示
                        2               〃      表示状態の検査
                        -1              〃      自動制御
        d2.l    表示座標(d1.l = 1 の時)
                d2.hw   X 座標
                d2.w    Y 〃

返値    表示状態(0:消去 1:表示)

        ソフトキーボードを制御する。
        自動制御を指定すると、マウスの右ボタンを押すことにより状態が
        非表示→マウス表示→キーボード/マウス表示→マウス表示→非表示
        と変化する。

==============================================================================

$7e     _DENSNS         電卓制御

返値    なし(d0.l は破壊される)

    　キー入力による電卓の処理を行う。電卓の操作は IOCS _B_KEYINP、_B_KEYSNS
    などのキー入力が行われた際に処理されるため、マウス操作専用のようなキー入力
    を行わないプログラム上ではソフトウェアキーボードでの電卓も操作できない。
    そこで、適度な間隔で IOCS _DENSNS を呼ぶことで電卓の処理が行われる。
    　ただし実際には、キーバッファ中の最古の入力しか参照しないため電卓以外のキ
    ー入力をすると電卓の操作ができなくなる。IOCS _B_KEYSNS で入力を調べ、入力
    があった場合は IOCS _B_KEYINP で読み捨ててキーバッファを空にするなどの対処
    方法がある。

不具合
    該当環境: ROM IOCS 全バージョン
    修正環境: KeyWitch
    参照先: IOCS _B_KEYINP
    　電卓を使用すると d3 レジスタの値が破壊される。

==============================================================================

$7f     _ONTIME         起動後の経過時間を調べる

返値    d0.l    経過時間の時分秒(0～23:59:59"99=8639999,1/100秒単位)
        d1.l    〃        日数  (0～65535)

        ROM が起動してからの時間を調べる。
        ROM IOCS では、ショートカットで呼び出すと割り込み禁止状態になったまま
        で帰るので注意すること。

==============================================================================

$80     _B_INTVCS       ベクタ設定

引数    d1.w    ベクタ番号($0000～$00ff:割り込み $0100～$01ff:IOCS コール)
        a1.l    処理アドレス

返値    変更前の処理アドレス

        ベクタの処理アドレスを設定する。
        設定したアドレスはスーパーバイザモードで呼び出される。
        割り込みからは rte で、IOCS コールは rts で戻る。
        ROM IOCS version 1.3 のみ、ベクタ番号が異常な場合に -1 を返す。

==============================================================================

$81     _B_SUPER        スーパーバイザ/ユーザモードの切り換え

　スーパーバイザ/ユーザモードを切り換える。

　引数 a1.l (ssp の値)により動作モードが切り替わる。
    a1.l = 0 ………… スーパーバイザモードに切り換える
    a1.l = 0以外 …… ユーザーモードに切り換える

a1.l = 0 …… スーパーバイザモードに切り換える
    　MPU をスーパーバイザモードに切り換える。成功した場合は、その時点の usp
    の値が ssp に設定され、ssp がシステム・スタックポインタとして使われるよう
    になる。

    引数    a1.l    0

    返値    d0.l    切り換え前の ssp の値。ただし、既にスーパーバイザモードに
                    なっていたら -1。
            a1.l    不定

a1.l = 0以外 …… ユーザーモードに切り換える
    　MPU をユーザーモードに切り換える。ssp は指定したアドレスに設定され、usp
    がシステム・スタックポインタとして使われるようになる。

    引数    a1.l    ssp に設定する値(0以外)

    返値    d0.l    常に 0
            a1.l    不定

    　引数の a1.l は、通常はスーパーバイザモードに切り換えた際の返値 d0.l の値
    を指定する。ただし値の検査は行われない。スーパーバイザモード中に重ねてスー
    パーバイザモードに切り換えようとした場合の返値 d0.l = -1 をそのまま a1.l
    に入れてユーザーモードに切り替えようとすると、ssp を -1 に設定しようとして
    アドレスエラーまたはバスエラーが発生するので注意すること。

コード例
    suba.l a1,a1
    IOCS _B_SUPER  ;スーパーバイザモードに切り換え
    move.l d0,-(sp)

    ;何らかの処理

    move.l (sp)+,d0
    bmi @f  ;最初からスーパーバイザモードだった
        movea.l d0,a1
        IOCS _B_SUPER  ;ユーザーモードに切り替え
    @@:

==============================================================================

$82     _B_BPEEK        指定アドレスから 1 バイト読み込み

引数    a1.l    読み込みアドレス

返値    d0.b    データ
        a1.l    次のアドレス

        指定アドレスから 1 バイトデータを読み込む。

==============================================================================

$83     _B_WPEEK        指定アドレスから 1 ワード読み込み

引数    a1.l    読み込みアドレス

返値    d0.w    データ
        a1.l    次のアドレス

        指定アドレスから 1 ワードデータを読み込む。

==============================================================================

$84     _B_LPEEK        指定アドレスから 1 ロングワード読み込み

引数    a1.l    読み込みアドレス

返値    d0.l    データ
        a1.l    次のアドレス

        指定アドレスから 1 ロングワードデータを読み込む。

==============================================================================

$85     _B_MEMSTR       指定アドレスから複数バイト読み込み

引数    d1.l    転送バイト数-1
        a1.l    転送元アドレス
        a2.l    転送先アドレス

返値    a1.l    次のアドレス
        a2.l    〃
        d1.l は破壊される。

        指定アドレスから複数バイトデータを転送する。
        IOCS _B_MEMSET とは転送の方向が違う(*a2++ = *a1++)。

==============================================================================

$86     _B_BPOKE        指定アドレスヘ 1 バイト書き込み

引数    d1.b    データ
        a1.l    書き込みアドレス

返値    a1.l    次のアドレス

        指定アドレスに 1 バイトデータを書き込む。

==============================================================================

$87     _B_WPOKE        指定アドレスヘ 1 ワード書き込み

引数    d1.w    データ
        a1.l    書き込みアドレス

返値    a1.l    次のアドレス

        指定アドレスに 1 ワードデータを書き込む。

==============================================================================

$88     _B_LPOKE        指定アドレスヘ 1 ロングワード書き込み

引数    d1.l    データ
        a1.l    書き込みアドレス

返値    a1.l    次のアドレス

        指定アドレスに 1 ロングワードデータを書き込む。

==============================================================================

$89     _B_MEMSET       指定アドレスヘ複数バイト書き込み

引数    d1.l    転送バイト数-1
        a1.l    転送先アドレス
        a2.l    転送元アドレス

返値    a1.l    次のアドレス
        a2.l    〃
        d1.l は破壊される。

        指定アドレスに複数バイトデータを転送する。
        IOCS _B_MEMSTR とは転送の方向が違う(*a1++ = *a2++)。

==============================================================================

$8a     _DMAMOVE        DMA 転送

引数    d1.b    モード
                bit    7        方向(0:a1からa2 1:a2からa1)
                bit 3～2        MAC(0:a1固定 1:a1++ 2:a1-- 3:指定禁止)
                bit 1～0        DAC(0:a2固定 1:a2++ 2:a2-- 3:指定禁止)
        d2.l    転送バイト数
        a1.l    転送元アドレス
        a2.l    転送先〃

返値    d0/d2/a1/a2 は内容が保証されない。

        バイト単位で DMA 転送を行なう。
        $ff00 バイト以上転送する場合はすぐに戻ってこない。
        DMA が使用不可能であれば、使用可能になるまで待つ。

        IOCS _DMAMOVE、_DMAMOV_A、_DMAMOV_L は必ずバイトサイズで転送を行うので、
        ワードサイズでアクセスしなければならないポート(PCG エリアなど)に対して
        使用しないように注意すること。

==============================================================================

$8b     _DMAMOV_A       DMA 転送(アレイチェーン)

引数    d1.b    モード
        d2.l    チェーンテーブルの個数
        a1.l            〃        アドレス
        a2.l    転送先アドレス

        アレイチェーンによってバイト単位で DMA 転送を行なう。
        DMA が使用不可能であれば、使用可能になるまで待つ。
        アレイチェーンテーブルの内容は、以下のチェーンテーブルを繰り返したもの。

offset  size
0       1.l     転送元データのアドレス
4       1.w     転送バイト数(1～$ffff)

==============================================================================

$8c     _DMAMOV_L       DMA 転送(リンクアレイチェーン)

引数    d1.b    モード
        a1.l    チェーンテーブルのアドレス
        a2.l    転送先アドレス

        リンクアレイチェーンによってバイト単位で DMA 転送を行なう。
        DMA が使用不可能であれば、使用可能になるまで待つ。
        リンクアレイチェーンテーブルの内容は、以下のチェーンテーブルを連結した
        もの。

offset  size
0       1.l     転送元データのアドレス
4       1.w     転送バイト数(1～$ffff)
6       1.l     次のテーブルのアドレス(0 でテーブルの終わり)

==============================================================================

$8d     _DMAMODE        DMA 状態検査

返値    実行状態
        d0.l =  $00     何も実行していない
                $8a     IOCS _DMAMOVE ($8a) を実行中
                $8b     IOCS _DMAMOV_A($8b) 〃
                $8c     IOCS _DMAMOV_L($8c) 〃

        DMA の実行状態を調べる。

==============================================================================

$8e     _BOOTINF        起動情報を得る

返値    起動状態
        bit 31～24      起動方法(0:パワースイッチ 1:外部スイッチ 2:タイマ)
        bit 23～ 0      ブート情報($80～$8f:SASI-HD 0～15
                                   $90～$93:2HD-FD 0～3
                           $ed0000～$ed3ffe:SRAM
                                     その他:ROM)

        起動情報を調べる。ROM から起動した場合は起動アドレス(1.l)へのポインタ
        を返すが、SRAM から起動した場合は起動したアドレスそのものを返す。
        なお、SRAM/ROM から起動後、SRAM に設定されている起動アドレスを変更する
        と正しいアドレスを返さない。

==============================================================================

$8f     _ROMVER         ROM バージョンを得る

返値    バージョン/作成日(BCD)
                bit 31～24      バージョン
                bit 23～16      年
                bit 15～ 8      月
                bit  7～ 0      日

        ROM のバージョンと作成年月日を調べる。

==============================================================================

$90     _G_CLR_ON       グラフィック画面の初期化及び表示モードの設定

        グラフィック画面をクリアして表示する。パレットは標準に戻り、アクセスペ
        ージは 0 に設定される。
        ROM IOCS version 1.3 では、画面モード(_CRTMOD)が 20 以上の時に正常に動
        作しないので注意すること。

==============================================================================

$91     (未公開)        グラフィック画面モードの設定

引数    d1.b    グラフィック画面モード
            d1.b =  0      16色 4画面(実画面 512)
                    1     256色 2画面(実画面 512)
                    3   65536色 1画面(実画面 512)
                    4      16色 1画面(実画面1024)
                   -1   現在のモードを調べる

返値    d0.l    変更前のグラフィック画面モード

    　グラフィック画面モードを直接設定する。設定データは VC R0($e82400) の設定
    と同じ。

非公式情報
    コール名 _G_MOD
    参考: https://stdkmd.net/udcx68k/#iocs_g_mod

==============================================================================

$92     (未公開)        プライオリティ設定

引数    d1.w    プライオリティ設定(ただし d1.w = -1 の時は現在の設定を調べる)

返値    d0.l    変更前の設定

    　プライオリティを直接設定する。設定データは VC R1($e82500) の設定と同じ。

非公式情報
    コール名 _PRIORITY
    参考: https://stdkmd.net/udcx68k/#iocs_priority

==============================================================================

$93     (未公開)        画面表示及び特殊モードの設定

引数    d1.w    画面表示及び特殊モード設定
                (ただし d1.w = -1 の時は現在の設定を調べる)

返値    d0.l    変更前の設定

    　画面表示及び特殊モードを直接設定する。設定データは VC R2($e82600) の設定
    と同じ。

非公式情報
    コール名 _CRTMOD2
    参考: https://stdkmd.net/udcx68k/#iocs_crtmod2

==============================================================================

$94     _GPALET         グラフィックパレット設定

　グラフィックパレットを設定または収得する。グラフィック画面が初期化されていな
いか、パレットコードが正しくない場合はエラーとなる。

　カラーコードの引数 d2.l により動作モードが切り替わる。
    d2.l = -1以外 …… グラフィックパレットを設定する
    d2.l = -1 ………… グラフィックパレットを取得する

d2.l = -1以外 …… グラフィックパレットを設定する
    　グラフィックパレットを設定する。

    引数    d1.w    パレットコード
                           16色モード時  0～   15
                          256色モード時  0～  255
                        65536色モード時  0～65535
            d2.l    カラーコード(0～65535)

    返値    d0.l    不定
                    (非公式情報) ROM IOCS では正常終了時に d0.l = 0、エラー時
                    に d0.l = -1 を返す実装となっている。

d2.l = -1 …… グラフィックパレットを取得する
    引数    d1.w    パレットコード
            d2.l    -1

    返値    d0.l    カラーコード(0～65535)
                    (非公式情報) ROM IOCS ではエラー時に d0.l = -1 を返す実装
                    となっている。

    不具合
        該当環境: ROM IOCS 全バージョン
        修正環境: HIOCS.X
        　65536色モードでは正常に動作しない(上位バイトの取得時に下位バイト用の
        パレットテーブルを参照している)。

==============================================================================

$95     (未公開)        カラーコード設定

引数    d1.w    パレットコード

    　IOCS $9a、$9b、$9c で書き込まれるパレットコードを設定する。

非公式情報
    コール名 _PENCOLOR
    参考: https://stdkmd.net/udcx68k/#iocs_pencolor

==============================================================================

$96     (未公開)        アクセスページ設定

引数    d1.w    アクセスページ(0～3)

    　グラフィック IOCS で操作されるページを直接設定する。

    　IOCS _APAGE($b1) とほぼ同じであるが、存在しないページを指定してもエラー
    にならないので注意すること。

非公式情報
    コール名 _SET_PAGE
    参考: https://stdkmd.net/udcx68k/#iocs_set_page

==============================================================================

$97     (未公開)        グラフィック VRAM のドット単位読み込み

引数    d1.w    X 座標
        d2.w    Y 座標
        a1.l    バッファのアドレス
                (0,a1)  X 方向のドット数
                (2,a1)  Y 方向のドット数
                (4,a1)  (色数 $000f:16色 $00ff:256色 $ffff:65536色)
                (6,a1)  (パターンデータ)

    　グラフィック画面からバッファにドット単位で読み込む。

非公式情報
    コール名 _GGET
    参考: https://stdkmd.net/udcx68k/#iocs_gget

==============================================================================

$98     (未公開)        グラフィック VRAM のドット単位書き込み(色マスクあり)

引数    d1.w    X 座標
        d2.w    Y 座標
        d3.w    マスクするカラーコード
        a1.l    バッファのアドレス
                (0,a1)  X 方向のドット数
                (2,a1)  Y 方向のドット数
                (4,a1)  色数($000f:16色 $00ff:256色 $ffff:65536色)
                (6,a1)  パターンデータ

返値    d0.l =  0   正常終了
               -1   エラー(指定された色数と実際の設定が異なる)

    　バッファからグラフィック画面にドット単位で書き込む。マスクするカラーコー
    ドに指定した色のドットは書き込まれない。

非公式情報
    コール名 _MASK_GPUT
    参考: https://stdkmd.net/udcx68k/#iocs_mask_gput

==============================================================================

$99     (未公開)        グラフィック VRAM のドット単位書き込み

引数    d1.w    X 座標
        d2.w    Y 座標
        a1.l    バッファのアドレス
                (0,a1)  X 方向のドット数
                (2,a1)  Y 方向のドット数
                (4,a1)  色数($000f:16色 $00ff:256色 $ffff:65536色)
                (6,a1)  パターンデータ

返値    d0.l =  0   正常終了
               -1   エラー(指定された色数と実際の設定が異なる)

    　バッファからグラフィック画面にドット単位で書き込む。

非公式情報
    コール名 _GPUT
    参考: https://stdkmd.net/udcx68k/#iocs_gput

==============================================================================

$9a     (未公開)        グラフィック VRAM のビットパターン書き込み

引数    d1.w    X 座標
        d2.w    Y 座標
        a1.l    バッファのアドレス
                (0,a1)  X 方向のドット数
                (2,a1)  Y 方向のドット数
                (4,a1)  ビットパターン

    　グラフィック画面にビットパターンを書き込む。ビットが %1 のドットは IOCS
    $95 で設定したカラーコードが書き込まれ、%0 のドットは何も書き込まれない。

非公式情報
    コール名 _GPTRN
    参考: https://stdkmd.net/udcx68k/#iocs_gptrn

==============================================================================

$9b     (未公開)        グラフィック VRAM のビットパターン書き込み(バックカラーあり)

引数    d1.w    X 座標
        d2.w    Y 座標
        d3.w    バックカラーコード
        a1.l    バッファのアドレス
                (0,a1)  X 方向のドット数
                (2,a1)  Y 方向のドット数
                (4,a1)  ビットパターン

    　グラフィック画面にビットパターンを書き込む。ビットが %1 のドットは IOCS
    $95 で設定したカラーコードが書き込まれ、%0 のドットはバックカラーコードが
    書き込まれる。

非公式情報
    コール名 _BK_GPTRN
    参考: https://stdkmd.net/udcx68k/#iocs_bk_gptrn

==============================================================================

$9c     (未公開)        グラフィック VRAM のビットパターン拡大書き込み

引数    d1.w    X 座標
        d2.w    Y 座標
        d3.w    X 方向の拡大率
        d4.w    Y 座標
        a1.l    バッファのアドレス
                (0,a1)  X 方向のドット数
                (2,a1)  Y 方向のドット数
                (4,a1)  ビットパターン

    　グラフィック画面にビットパターンを拡大して書き込む。ビットが %1 のドット
    は IOCS $95 で設定したカラーコードが書き込まれ、%0 のドットは何も書き込ま
    れない。

非公式情報
    コール名 _X_GPTRN
    参考: https://stdkmd.net/udcx68k/#iocs_x_gptrn

==============================================================================

$a0     _SFTJIS         S-JIS→JIS コード変換

引数    d1.w    S-JIS 漢字コード

返値    d0.hw = 0       変換成功
                -1      エラー
        d0.w    JIS 漢字コード(エラーの場合通常 $2228:※)
        d1.l    〃

        S-JIS 漢字コードを JIS 漢字コードに変換する。

==============================================================================

$a1     _JISSFT         JIS→S-JIS コード変換

引数    d1.w    JIS 漢字コード

返値    d0.hw = 0       変換成功
                -1      エラー
        d0.w    S-JIS 漢字コード(エラーの場合通常 $81a6:※)
        d1.l    〃

        JIS 漢字コードを S-JIS 漢字コードに変換する。

==============================================================================

$a2     _AKCONV         ANK→S-JIS コード変換

引数    d1.hw   平仮名/片仮名の指定(0:平仮名に変換 1:片仮名に変換)
        d1.w    ANK コード($20～7e,$a1～df)

返値    d0.hw = 0       変換成功
                -1      エラー
        d0.w    S-JIS 漢字コード(エラーの場合通常 $81a6:※)

        ANK コードを 全角 S-JIS コードに変換する。

==============================================================================

$a3     _RMACNV         ローマ字→ANK カナ変換

引数    d1.b    アルファベット
        a1.l    作業領域のアドレス
        a2.l    変換結果を入れるバッファのアドレス

返値    ステータス
        d0.l =  0       変換途中で返せる仮名文字がない
                        (作業領域に変換途中の文字が残っているので、それを破棄
                        してはいけない)
                -1      変換不可能な文字が指定された
                        (作業領域の先頭バイトは 0 になる)
                その他  変換文字数(作業領域に変換途中の文字が残っている可能性
                        があるので、それを破棄してはいけない)

        ローマ字を仮名に変換する。ローマ字は通常大文字を使用し、促音や拗音など
        小さい仮名はローマ字の母音にアルファベットの小文字を用いる。
        最初の変換の前に、作業領域の先頭のバイトを 0 にしておく。

==============================================================================

$a4     _DAKJOB         濁点処理

引数    a1.l    全角文字列の終端(0)のアドレス

返値    d0.l    文字列の増加したバイト数
                d0.l =  0       最後の全角文字に濁点を付けた場合
                        2       文字列の最後に濁点を加えた場合
        a1.l    処理後の全角文字列の終端のアドレス

        全角文字列の濁点処理を行なう。

==============================================================================

$a5     _HANJOB         半濁点処理

引数    a1.l    全角文字列の終端(0)のアドレス

返値    d0.l    文字列の増加したバイト数
                d0.l =  0       最後の全角文字に半濁点を付けた場合
                        2       文字列の最後に半濁点を加えた場合
        a1.l    処理後の全角文字列の終端のアドレス

        全角文字列の半濁点処理を行なう。

==============================================================================

$ac     _SYS_STAT       システム状態の設定

　システム状態の設定を行なう。この IOCS コールは ROM IOCS version 1.3 でのみ使
用できる。

　引数 d1.w により動作モードが切り替わる。なお、d1.w の値が不正な場合は d0.l =
-1 が返る。
    d1.w = 0 …… MPU 状態の収得
    d1.w = 1 …… キャッシュ状態の収得
    d1.w = 2 …… キャッシュを SRAM の設定値に設定
    d1.w = 3 …… キャッシュの消去
    d1.w = 4 …… キャッシュの設定

d1.w = 0 …… MPU 状態の収得
    　MPU の状態を収得する。

    引数    d1.w = 0

    返値    d0.l    MPU ステータス
                        bit 31～16  クロック速度(0.1MHz単位)
                        bit     15  浮動小数点演算コプロセッサ(0:なし 1:あり)
                        bit     14  MMU(0:なし 1:あり)
                        bit  7～ 0  MPU タイプ(0:68000 1:68010 2:68020 3:68030)

d1.w = 1 …… キャッシュ状態の収得
    　MPU の命令キャッシュ、データキャッシュの有効無効の状態を収得する。

    引数    d1.w = 1

    返値    d0.l    キャッシュ状態
                        bit 1  データキャッシュ(0:無効 1:有効)
                        bit 0  命令キャッシュ  (0:無効 1:有効)

d1.w = 2 …… キャッシュを SRAM の設定値に設定
    　MPU の命令キャッシュ、データキャッシュの有効無効を SRAM の設定値に変更す
    る。

    引数    d1.w = 2

    返値    d0.l    変更前のキャッシュ状態
                        bit 1  データキャッシュ(0:無効 1:有効)
                        bit 0  命令キャッシュ  (0:無効 1:有効)

d1.w = 3 …… キャッシュの消去
    　MPU の命令キャッシュ、データキャッシュを消去する。

    引数    d1.w = 3

    返値    なし(d0.l は破壊される)

d1.w = 4 …… キャッシュの設定
    　MPU の命令キャッシュ、データキャッシュの有効無効を変更する。

    引数    d1.w = 4

    返値    d0.l    変更前のキャッシュ状態
                        bit 1  データキャッシュ(0:無効 1:有効)
                        bit 0  命令キャッシュ  (0:無効 1:有効)

ユーザー拡張
    　X68000 に上位の MPU(68030、68040、68060)を搭載するアクセラレータでは、専
    用のパッチドライバにより IOCS _SYS_STAT が使用可能となる。

    　また、パッチドライバによっては機能が拡張される。以下の表には非公開の機能
    も含まれる。

            +- 040SYSpatch.x
            |   +- jupiter.x
            |   |   +- 060turbo.sys
    d1.w    |   |   |
    $4000           X   ローカルメモリの情報の取得
    $4001           X   物理アドレスがローカルメモリを指しているか調べる
    $4002           X   論理アドレスがローカルメモリを指しているか調べる
    $4003           X   論理アドレスが DMA 転送可能かどうか調べる
    $4004           X   論理アドレスの範囲が DMA 転送可能かどうか調べる
    $5000           X   プログラムをローカルメモリで実行する
    $5001           X   現在のプロセスを終了後、プログラムを実行する
    $5002           X   ロードするメモリ空間の指定
    $5003           X   アロケートするメモリ空間の指定
    $8000   X   X   X   パッチドライバのバージョン取得
    $8001   X   X   X   指定論理アドレスのキャッシュモード取得
    $8004   X   X   X   指定論理アドレスのキャッシュモード設定
    $c000       X   X   互換モードへの移行
    $c001       X   X   拡張モードへの移行
    $c002       X   X   現在の互換・拡張モードを取得する
    $c003       X   X   モード切り替え時シグナルの設定
    $c004       X   X   モード切り替え時シグナルの解除
    $c005       X   X   メモリ情報テーブルの取得
    $c006       X   X   キャッシュとスーパースケーラの状態の取得
    $c007       X   X   キャッシュとスーパースケーラの状態の設定
    $c008       X       指定ベクタが使用されているか調べる
    $f000   X   X   X   論理アドレスを物理アドレスに変換
    $f001   X   X   X   指定物理アドレスを指定論理アドレスにマッピング
    $f002   X   X   X   指定論理アドレスのステータス設定・取得

==============================================================================

$ad     _B_CONMOD       カーソルおよびスクロールの設定

　カーソルおよびスクロールの設定を行う。この IOCS コールは IOCS.X 常駐時または
ROM IOCS version 1.3 でのみ使用できる。

　引数 d1.w により動作モードが切り替わる。
    d1.w =  0 …… カーソル点滅許可 (XC: B_CURMOD)
    d1.w =  1 …… カーソル点滅禁止 (XC: B_CURMOD)
    d1.w =  2 …… カーソルパターン指定
    d1.w =  3 …… カーソルパターン定義 (XC: B_CURDEF)
    d1.w = 16 …… スムーススクロールの指定 (XC: B_SCROLL)
    d1.w = 17 …… ラスタコピースクロールの指定 (XC: B_SCROLL)
    d1.w = 18 …… ソフトコピースクロールの指定 (XC: B_SCROLL)

d1.w = 0 …… カーソル点滅許可 (XC: B_CURMOD)
    　カーソルの点滅を許可する。カーソルが描画されると、タイマーにより一定時間
    ごとにカーソルの消去と描画が行われる。

    引数    d1.w = 0

    返値    なし(d0.l は内容が保証されない)

d1.w = 1 …… カーソル点滅禁止 (XC: B_CURMOD)
    　カーソルの点滅を禁止する。カーソルが描画されたのち、時間が経過してもカー
    ソルは消去されず、表示されたままになる。

    引数    d1.w = 1

    返値    なし(d0.l は内容が保証されない)

d1.w = 2 …… カーソルパターン指定
    　カーソルパターンを指定する。

    　このコールは IOCS.X と ROM IOCS version 1.3 で仕様が異なり、また IOCS.X
    では引数 d2.l の下位ワードにより動作モードが切り替わる。
        IOCS.X、d2.w = 0 ………… 内部バッファに定義されたパターンで描画 (XC: B_CURPAT1)
        IOCS.X、d2.w = 0以外 …… 開始ラインと XOR パターンによる描画 (XC: B_CURPAT)
        ROM IOCS version 1.3 …… 開始ラインと XOR パターンによる描画

    IOCS.X、d2.w = 0 …… 内部バッファに定義されたパターンで描画 (XC: B_CURPAT1)
        　d1.w = 3 のコールで設定したパターンで描画するモードに設定する。これ
        はテキスト画面の値との排他的論理和ではなく、パターンの値をそのままテキ
        スト画面に書き込む。

        引数    d1.w = 2
                d2.l = カーソルパターン
                    d2.w = 0

        返値    なし(d0.l は内容が保証されない)

        　このモードではカーソル描画によりテキスト画面の内容が失われるため、描
        画の際に IOCS.X 内部のバッファにテキスト画面の値を保存し、カーソル消去
        時に保存バッファからテキスト画面に復元する。

    IOCS.X、d2.w = 0以外 …… 開始ラインと XOR パターンによる描画 (XC: B_CURPAT)
        　d2.hw で指定したライン位置から一番下のラインまで、プレーン0に対して
        d2.b の値と、プレーン1に対して d2.hb の値とそれぞれ排他的論理和をとる。

        引数    d1.w = 2
                d2.l = カーソルパターン
                    d2.hw = 開始ライン(0～15)
                    d2.hb = プレーン1の XOR パターン
                    d2.b  = プレーン0の XOR パターン

        返値    なし(d0.l は内容が保証されない)

        　引数に d2.l = $0000_ffff を指定すると標準のカーソル形状(8ドット×16
        ラインの矩形が全反転)になる。

        　引数の d2.hb と d2.b に両方とも $00 を指定することはできない(d2.w =
        0 のモードになってしまうため)。

    ROM IOCS version 1.3 …… 開始ラインと XOR パターンによる描画
        　d2.hw で指定したライン位置から一番下のラインまで、プレーン0に対して
        d2.b の値と、プレーン1に対して d2.hb の値とそれぞれ排他的論理和をとる。

        引数    d1.w = 2
                d2.l = カーソルパターン
                    d2.hw = 開始ライン(0～15)
                    d2.hb = プレーン1の XOR パターン
                    d2.b  = プレーン0の XOR パターン

        返値    なし(d0.l は内容が保証されない)

        　引数に d2.l = $0000_ffff を指定すると標準のカーソル形状(8ドット×16
        ラインの矩形が全反転)になる。

        　引数の d2.hb と d2.b に両方とも $00 を指定すると、それぞれ $ff とし
        て扱われる。

d1.w = 3 …… カーソルパターン定義 (XC: B_CURDEF)
    　カーソルパターンを定義する。このコールは IOCS.X 常駐時のみ使え、ROM IOCS
    version 1.3 で呼び出しても効果がない。

    引数    d1.w = 3
            d2.l = パターンアドレス(16×2 = 32バイト)

    返値    なし(d0.l は内容が保証されない)

    　d2.l をカーソルのパターンアドレスと見なして IOCS.X の内部バッファにコピ
    ーする。パターンはプレーン0、1の順に16バイトずつ並べる。

d1.w = 16 …… スムーススクロールの指定 (XC: B_SCROLL)
    　スムーススクロールの指定を行う。

    引数    d1.w = 16
            d2.l = スクロール指定
                0 …… ジャンプスクロール
                1 …… 4ドットスクロール
                2 …… 8ドットスクロール
                3 …… 16ドットスクロール

    返値    なし(d0.l は内容が保証されない)

    　スムーススクロールを使用する場合は、文字を連続的に出力しなければスクロー
    ル時に画面が乱れる。垂直同期(16ms)の間に1ライン出力を終了すること。

d1.w = 17 …… ラスタコピースクロールの指定 (XC: B_SCROLL)
    　スクロール時にラスタコピースクロールを行うように指定する。

    引数    d1.w = 17

    返値    なし(d0.l は内容が保証されない)

d1.w = 18 …… ソフトコピースクロールの指定 (XC: B_SCROLL)
    　スクロール時にソフトコピースクロールを行うように指定する。

    引数    d1.w = 18

    返値    なし(d0.l は内容が保証されない)

    　広範囲でのソフトコピースクロールは表示速度が遅くなる。

==============================================================================

$ae     _OS_CURON       カーソル点滅開始

返値    なし(d0.l は破壊される)

    　カーソルの点滅を開始する。カーソルが描画されていない場合は、ただちに描画
    する。IOCS $20～$2f に対して有効。

    　コンソールに対して ESC[>5l を出力した時に使用される。

    　プログラムからテキスト画面を直接読み書きする場合は、IOCS _OS_CUROF と
    IOCS _OS_CURON ではなく、IOCS _B_CUROFF と IOCS _B_CURON を用いる。

==============================================================================

$af     _OS_CUROF       カーソル点滅終了

返値    なし(d0.l は破壊される)

    　カーソルの点滅を終了する。カーソルが描画されている場合は、ただちに消去す
    る。IOCS $20～$2f に対して有効。

    　コンソールに対して ESC[>5h を出力した時に使用される。

==============================================================================

$b0     _DRAWMODE       グラフィック描画モードの設定

引数    d1.w    描画モード(0:通常 1:反転 -1:現在のモードを調べる)

返値    変更前のモード

        グラフィック描画の際の描画モードを設定する。
        反転モードで描画した場合、書き込まれるドットの色の NOT 値で描画する。
        このモードで 2 回描画すると、画面が元に戻る。使用後は通常の描画モード
        に戻すこと。
        反転モードが有効な IOCS コールは _LINE、_BOX、_FILL、_SYMBOL だけで、
        他のコールは常に通常のモードで描画される。
        この IOCS コールは ROM IOCS version 1.3 若しくは IOCS.X、HIOCS.X 常駐
        時のみ使用可能だが、前の二つでは正常に動作しない。

==============================================================================

$b1     _APAGE          グラフィック描画ページの設定

引数    d1.b    書き込みページ(0～3,-1 の時は現在の設定を調べます)

返値    d1.b = -1 の時、現在の書き込みページ
        それ以外の時、ステータス
                d0.l =  0       正常終了
                        -1      グラフィック使用不可
                        -2      ページが指定外(4 以上)
                        -3      指定ページは現在のモードでは使用不可

        グラフィック画面の書き込みページを設定する。

==============================================================================

$b2     _VPAGE          グラフィック画面表示ページの設定

引数    d1.b    表示ページ(bit 0～3 がページ 0～3 に対応)

返値    d0.l =  0       正常終了
                -1      グラフィック使用不可
                -2      ページが指定外
                -3      指定ページは現在のモードでは使用不可

        グラフィック画面の表示ページを設定する。

==============================================================================

$b3     _HOME           グラフィック画面の表示位置設定

引数    d1.b    表示位置を設定するページ(bit 0～3 がページ 0～3 に対応
                                         0 で全てのページ)
        d2.w    X 座標
        d3.w    Y 〃

返値    d0.l =  0       正常終了
                -1      グラフィック使用不可
                -2      ページ若しくは座標が指定外
                -3      指定ページ若しくは座標は現在のモードでは使用不可

        グラフィック画面の表示位置を設定する。
        d1.b = 0 の時、有効なページが全て変更される。

==============================================================================

$b4     _WINDOW         グラフィック描画ウィンドウの設定

引数    d1.w    左端 X 座標
        d2.w    上端 Y 〃
        d3.w    右端 X 〃
        d4.w    下端 Y 〃

返値    d0.l =  0       正常終了
                -1      グラフィック使用不可
                -2      座標指定が異常
                -3      指定座標は現在のモードでは使用不可

        グラフィック画面のクリッピング範囲を設定する。IOCS $b5～$bf に対して有
        効。d1.w ≦ d3.w かつ d2.w ≦ d4.w でなければならない。

==============================================================================

$b5     _WIPE           グラフィック画面のクリア

返値    d0.l =  0       正常終了
                -1      グラフィック使用不可

        グラフィック画面をクリアする。

==============================================================================

$b6     _PSET           グラフィック画面のポイントセット

引数    a1.l    パラメータバッファのアドレス
                (0,a1)  X 座標
                (2,a1)  Y 〃
                (4,a1)  パレットコード

返値    d0.l =  0       正常終了
                -1      グラフィック使用不可
                -2      指定パレットコードは現在のモードでは使用不可

        グラフィック画面に点を描画する。

==============================================================================

$b7     _POINT          グラフィック画面のポイントゲット

引数    a1.l    パラメータバッファのアドレス
                (0,a1)  X 座標
                (2,a1)  Y 〃
                (4,a1)  (パレットコード)

返値    d0.l =  0       正常終了
                -1      グラフィック使用不可

        グラフィック画面の指定の点のパレットコードを調べる。
        指定座標がクリッピング範囲外であった場合、パレットコードは常に 0 が返
        る。

==============================================================================

$b8     _LINE           グラフィック画面のライン

引数    a1.l    パラメータバッファのアドレス
                 (0,a1) 始点 X 座標
                 (2,a1) 〃   Y 〃
                 (4,a1) 終点 X 〃
                 (6,a1) 〃   Y 〃
                 (8,a1) パレットコード
                (10,a1) ラインスタイル

返値    d0.l =  0       正常終了
                -1      グラフィック使用不可
                -2      指定パレットコードは現在のモードでは使用不可

        グラフィック画面に線を描画する。

==============================================================================

$b9     _BOX            グラフィック画面のボックス

引数    a1.l    パラメータバッファのアドレス
                 (0,a1) 始点 X 座標
                 (2,a1) 〃   Y 〃
                 (4,a1) 終点 X 〃
                 (6,a1) 〃   Y 〃
                 (8,a1) パレットコード
                (10,a1) ラインスタイル

返値    d0.l =  0       正常終了
                -1      グラフィック使用不可
                -2      指定パレットコードは現在のモードでは使用不可

        グラフィック画面に長方形を描画する。

==============================================================================

$ba     _FILL           グラフィック画面のボックスフィル

引数    a1.l    パラメータバッファのアドレス
                (0,a1)  始点 X 座標
                (2,a1)  〃   Y 〃
                (4,a1)  終点 X 〃
                (6,a1)  〃   Y 〃
                (8,a1)  パレットコード

返値    d0.l =  0       正常終了
                -1      グラフィック使用不可
                -2      指定パレットコードは現在のモードでは使用不可

        グラフィック画面に塗り潰した長方形を描画する。

==============================================================================

$bb     _CIRCLE         グラフィック画面のサークル

引数    a1.l    パラメータバッファのアドレス
                 (0,a1) 中心 X 座標
                 (2,a1) 中心 Y 座標
                 (4,a1) 半径
                 (6,a1) パレットコード
                 (8,a1) 円弧開始角度(負数で扇形を描画)
                (10,a1) 円弧終了角度(負数で扇形を描画)
                (12,a1) 比率

返値    d0.l =  0       正常終了
                -1      グラフィック使用不可
                -2      指定パレットコードは現在のモードでは使用不可

        グラフィック画面に楕円を描画する。
        円弧開始/終了角度は 0～360 で、負数を指定すると扇形(角度は値の絶対値)
        を描画する(0 度は -360 として指定する)。
        比率(以下 P)は 0～$ff00 で、描画する楕円の形は以下の通り。

          0 ≦ P ＜   256       横長楕円 Rx = R ; Ry = R*P/256
        256 ＜ P ≦ $ff00       縦長楕円 Ry = R ; Rx = R*P/$ff00
                                (P は 256 単位で切捨て)
               P ＝   256           真円 Rx = Ry = R

==============================================================================

$bc     _PAINT          グラフィック画面のペイント

引数    a1.l    パラメータバッファのアドレス
                 (0,a1) X 座標
                 (2,a1) Y 〃
                 (4,a1) パレットコード
                 (6,a1) 作業領域開始アドレス
                (10,a1) 〃      終了〃

返値    d0.l =  0       正常終了
                -1      グラフィック使用不可
                -2      指定パレットコードは現在のモードでは使用不可

        グラフィック画面を塗り潰す。
        作業領域は偶数番地から始まる必要があり、不足した場合はペイント途中で戻
        る。

==============================================================================

$bd     _SYMBOL         グラフィック画面のシンボル

引数    a1.l    パラメータバッファのアドレス

返値    d0.l =  0       正常終了
                -1      グラフィック使用不可
                -2      指定パレットコードは現在のモードでは使用不可

        グラフィック画面に文字列を拡大して描画する。
        座標は、回転角度が 0、90、180、270 の時それぞれ左上/左下/右下/右上隅を
        指定する。
        パラメータバッファの内容は以下の通り。

offset  size
 0      1.w     X 座標
 2      1.w     Y 〃
 4      1.l     文字列のアドレス
 8      1.b     X 方向倍率
 9      1.b     Y 〃
10      1.w     パレットコード
12      1.b     文字パターンの大きさ(0:12 ドット系 1:16〃 2:24〃)
13      1.b     回転角度(0:0°1:90°2:180°3:270°)

==============================================================================

$be     _GETGRM         グラフィック画面のドット単位読み込み

引数    a1.l    パラメータバッファのアドレス

返値    d0.l =  0       正常終了
                -1      グラフィック使用不可
                -2      座標指定が異常
                -3      バッファの容量が小さすぎる

        グラフィック画面からバッファにドット単位で読み込む。
        パラメータバッファの内容は以下の通り。

offset  size
 0      1.w     始点 X 座標
 2      1.w     〃   Y 〃
 4      1.w     終点 X 〃
 6      1.w     〃   Y 〃
 8      1.l     バッファ開始アドレス
12      1.l     〃      終了〃

==============================================================================

$bf     _PUTGRM         グラフィック画面のドット単位書き込み

引数    a1.l    パラメータバッファのアドレス

返値    d0.l =  0       正常終了
                -1      グラフィック使用不可
                -2      座標指定が異常
                -3      バッファの容量が小さすぎる

        バッファからグラフィック画面にドット単位で書き込む。
        パラメータバッファの内容は以下の通り。

offset  size
 0      1.w     始点 X 座標
 2      1.w     〃   Y 〃
 4      1.w     終点 X 〃
 6      1.w     〃   Y 〃
 8      1.l     バッファ開始アドレス
12      1.l     〃      終了〃

==============================================================================

$c0     _SP_INIT        スプライト初期化

返値    d0.l =  0   正常終了
               -1   画面モードが不正

    　スプライト画面を初期化する。

不具合
    該当環境: ROM IOCS 全バージョン
    　CRT モードが18(表示画面1024×848、24kHz)、19(表示画面640×480、VGA)の場
    合にエラーが返らず、バスエラーが発生する。
    参考: https://stdkmd.net/bugsx68k/#rom_spinit

==============================================================================

$c1     _SP_ON          スプライト表示

返値    d0.l =  0   正常終了
               -1   画面モードが不正

    　スプライト画面を表示する。

==============================================================================

$c2     _SP_OFF         スプライト消去

返値    d0.l =  0   正常終了
               -1   画面モードが不正

    　スプライト画面を表示しない。

==============================================================================

$c3     _SP_CGCLR       スプライトパターンのクリア

引数    d1.l    パターンコード(0～255)

返値    d0.l =  0   正常終了
               -1   画面モードが不正

    　指定した PCG をクリアする。クリアするパターンの大きさは128バイト。

不具合
    該当環境: ROM IOCS 全バージョン
    参照先: IOCS _SP_INIT
    　CRT モードが18、19の場合にエラーが返らず、バスエラーが発生する。

==============================================================================

$c4     _SP_DEFCG       スプライトパターンの定義

引数    d1.l    パターンコード(0～255)
        d2.l    パターンの大きさ(0:8x8 1:16x16)
        a1.l    パターンデータのアドレス

返値    d0.l =  0   正常終了
               -1   画面モードが不正

    　指定した PCG のパターンを定義する。
    　パターンの大きさは d2.l = 0 のとき32バイト、d2.l = 1 のとき128バイト。

不具合
    該当環境: ROM IOCS 全バージョン
    参照先: IOCS _SP_INIT
    　CRT モードが18、19の場合にエラーが返らず、バスエラーが発生する。

==============================================================================

$c5     _SP_GTPCG       スプライトパターンの読み込み

引数    d1.l    パターンコード(0～255)
        d2.l    パターンの大きさ(0:8x8 1:16x16)
        a1.l    バッファのアドレス

返値    d0.l =  0   正常終了
               -1   画面モードが不正

    　指定した PCG のパターンを読み込む。
    　バッファは d2.l = 0 のとき32バイト、d2.l = 1 のとき128バイト必要。

不具合
    該当環境: ROM IOCS 全バージョン
    参照先: IOCS _SP_INIT
    　CRT モードが18、19の場合にエラーが返らず、バスエラーが発生する。

==============================================================================

$c6     _SP_REGST       スプライトレジスタの設定

引数    d1.l    垂直帰線期間検出/スプライト番号
                bit   31        0:垂直帰線期間検出後設定 1:検出しない
                bit 6～0        スプライト番号(0～127)
        d2.l    X 座標(0～1023  16 で左端に表示される)
        d3.l    Y 〃  (〃       〃   上端〃          )
        d4.l    パターンコード
                bit     15      縦方向反転指定(0:反転しない 1:する)
                bit     14      横〃          (         〃        )
                bit 11～ 8      パレットブロック指定(0～15)
                bit  7～ 0      パターンコード(0～255)
        d5.l    プライオリティ
                d5.l =  0       スプライトを表示しない
                        1       BG0 < BG1 < SP
                        2       BG0 < SP  < BG1
                        3       SP  < BG0 < BG1

返値    d0.l =  0   正常終了
               -1   画面モードが不正

    　スプライトレジスタを設定する。
    　d2.l/d3.l/d4.l/d5.l を-1にすると設定を変更しないが、始めての設定時には-1
    を指定してはいけない。

不具合
    該当環境: ROM IOCS 全バージョン
    参照先: IOCS _SP_INIT
    　CRT モードが18、19の場合にエラーが返らず、バスエラーが発生する。

==============================================================================

$c7     _SP_REGGT       スプライトレジスタの読み出し

引数    d1.l    スプライト番号(0～127)

返値    d0.l =  0   正常終了
               -1   画面モードが不正
        d2.l    X 座標
        d3.l    Y 〃
        d4.l    パターンコード
        d5.l    プライオリティ

    　スプライトレジスタを読み出す。

不具合
    該当環境: ROM IOCS 全バージョン
    参照先: IOCS _SP_INIT
    　CRT モードが18、19の場合にエラーが返らず、バスエラーが発生する。

==============================================================================

$c8     _BGSCRLST       バックグラウンドスクロールレジスタの設定

引数    d1.l    垂直帰線期間検出/バックグラウンドの指定
                bit 31  0:垂直帰線期間検出後設定 1:検出しない
                bit  0  BG 番号(0/1)
        d2.l    X 座標(0～1023)
        d3.l    Y 〃  (〃     )

返値    d0.l =  0       正常終了
                -1      画面モードが不正

        バックグラウンドスクロールレジスタを設定する。d2.l/d3.lを -1 にすると
        設定を変更しないが、始めての設定時には -1 を指定してはいけない。

==============================================================================

$c9     _BGSCRLGT       バックグラウンドスクロールレジスタの読み出し

引数    d1.l    バックグラウンドの指定(0/1)

返値    d0.l =  0       正常終了
                -1      画面モードが不正
        d2.l    X 座標
        d3.l    Y 〃

        バックグラウンドスクロールレジスタを読み出す。

==============================================================================

$ca     _BGCTRLST       バックグラウンドコントロールレジスタの設定

引数    d1.l    バックグラウンドの指定(0/1)
        d2.l    テキストページの指定(0/1)
        d3.l    表示/非表示指定(0:非表示 1:表示)

返値    d0.l =  0       正常終了
                -1      画面モードが不正

        バックグラウンドコントロールレジスタを設定する。d2.l/d3.lを -1 にする
        と設定を変更しないが、始めての設定時には -1 を指定してはいけない。

==============================================================================

$cb     _BGCTRLGT       バックグラウンドコントロールレジスタの読み出し

引数    d1.l    バックグラウンドの指定(0/1)

返値    d0.l =  0       テキストページ 0、非表示
                1       〃             0、  表示
                2       〃             1、非表示
                3       〃             1、  表示
                -1      画面モードが不正

        バックグラウンドコントロールレジスタを読み出す。

==============================================================================

$cc     _BGTEXTCL       バックグラウンドテキストのクリア

引数    d1.l    テキストページの指定(0/1)
        d2.l    パターンコード

返値    d0.l =  0   正常終了
               -1   画面モードが不正

    　バックグラウンド画面の指定したテキストページをパターンコードで埋める。

不具合
    該当環境: ROM IOCS 全バージョン
    参照先: IOCS _SP_INIT
    　CRT モードが18、19の場合にエラーが返らず、バスエラーが発生する。

==============================================================================

$cd     _BGTEXTST       バックグラウンドテキストの設定

引数    d1.l    テキストページの指定(0/1)
        d2.l    X 座標(0～63)
        d3.l    Y 〃  (  〃 )
        d4.l    パターンコード

返値    d0.l =  0   正常終了
               -1   画面モードが不正

    　バックグラウンド画面のテキストページにパターンコードを設定する。

不具合
    該当環境: ROM IOCS 全バージョン
    参照先: IOCS _SP_INIT
    　CRT モードが18、19の場合にエラーが返らず、バスエラーが発生する。

==============================================================================

$ce     _BGTEXTGT       バックグラウンドテキストの読み出し

引数    d1.l    テキストページの指定(0/1)
        d2.l    X 座標(0～63)
        d3.l    Y 〃  (  〃 )

返値    d0.l =  0   正常終了
               -1   画面モードが不正

    　バックグラウンド画面のテキストページからパターンコードを読み出す。

不具合
    該当環境: ROM IOCS 全バージョン
    参照先: IOCS _SP_INIT
    　CRT モードが18、19の場合にエラーが返らず、バスエラーが発生する。

==============================================================================

$cf     _SPALET         スプライトパレットの設定

引数    d1.l    垂直帰線期間検出/パレットコード
                bit    31       0:垂直帰線期間検出後設定 1:検出しない
                bit 8～ 0       d2.l = 0 の場合、パレットコード(16～255)
                bit 3～ 0       d2.l != 0 の場合、パレットコード(0～15)
        d2.l    パレットブロック(1～15 もしくは 0)
        d3.l    カラーコード(d3.l = -1 の時カラーコードを調べる)

返値    d0.l =  -1      画面モードが不正
                -2      パレットブロック 0 を設定/収得しようとした
                その他  変更前の設定

        スプライトパレットを設定する。
        パレットブロックに 0 を指定した場合は、パレットコードをパレット先頭か
        らの通し番号(16～255)で指定する事が出来る。ただし、パレットブロック 0
        内で定義されるパレットコード(0～15)は指定できない。
        垂直帰線期間を検出せずにパレットを設定すると、画面がちらつく。

==============================================================================

$d0     _MACS_CALL      (ユーザ拡張) MACS 制御

引数    d1.w    コマンドコード

    　アニメーションドライバ MACSDRV.x で追加されたファンクションコールを呼び
    出す。

==============================================================================

$d1     _MOON           (ユーザ拡張) MOON 制御

引数    d1.l    モード

    　アニメーションドライバ MACSDRV.x 用ツール MOON.x で追加されたファンクシ
    ョンコールを呼び出す。

==============================================================================

$d3     _TXXLINE        テキスト画面の水平ライン

引数    a1.l    パラメータバッファのアドレス
                (0,a1)  テキストプレーン(0～3)
                (2,a1)  X 座標
                (4,a1)  Y 〃
                (6,a1)  X 方向の長さ
                (8,a1)  ラインスタイル(下位バイトのみ有効)

        テキスト画面に垂直線を描画する。
        ROM IOCS version 1.3 若しくは IOCS.X 常駐時は、テキストプレーンの指定
        において最上位ビットを 1 にすることにより、複数プレーンに同時に描画す
        る事が出来る。bit 0～3 がプレーン 0～3 に対応する。また、最上位ビット
        が 1 でない場合、呼び出された時にテキスト同時アクセス機能が有効になっ
        ていれば、テキストプレーンの指定は無視され、同時アクセスが設定されてい
        たプレーンに描画する。
        上記の条件にあてはまらない場合は指定したプレーンのみに描画する。

==============================================================================

$d4     _TXYLINE        テキスト画面の垂直ライン

引数    a1.l    パラメータバッファのアドレス
                (0,a1)  テキストプレーン(0～3)
                (2,a1)  X 座標
                (4,a1)  Y 〃
                (6,a1)  Y 方向の長さ
                (8,a1)  ラインスタイル(下位バイトのみ有効)

        テキスト画面に水平線を描画する。
        テキストプレーンの指定は _TXXLINE と同じ。

==============================================================================

$d5     _TXLINE         テキスト画面のライン

引数    a1.l    パラメータバッファのアドレス
                 (0,a1) テキストプレーン(0～3)
                 (2,a1) 始点 X 座標
                 (4,a1) 〃   Y 〃
                 (6,a1) X 方向の長さ
                 (8,a1) Y 〃
                (10,a1) ラインスタイル(下位バイトのみ有効)

        テキスト画面に線を描画する。
        テキストプレーンの指定は _TXXLINE と同じ。
        CRTC のビットマスク機能を使用しているので、マウスカーソルはオフにして
        このコールを呼び出ること。
        この IOCS コールは ROM IOCS version 1.3 若しくは IOCS.X 常駐時のみ使用
        可能。

==============================================================================

$d6     _TXBOX          テキスト画面のボックス

引数    a1.l    パラメータバッファのアドレス
                 (0,a1) テキストプレーン(0～3)
                 (2,a1) X 座標
                 (4,a1) Y 〃
                 (6,a1) X 方向の長さ
                 (8,a1) Y 〃
                (10,a1) ラインスタイル(下位バイトのみ有効)

        テキスト画面に長方形を描画する。
        テキストプレーンの指定は _TXXLINE と同じ。

==============================================================================

$d7     _TXFILL         テキスト画面のボックスフィル

引数    a1.l    パラメータバッファのアドレス
                 (0,a1) テキストプレーン(0～3)
                 (2,a1) X 座標
                 (4,a1) Y 〃
                 (6,a1) X 方向の長さ
                 (8,a1) Y 〃
                (10,a1) ラインスタイル

        テキスト画面に塗り潰した長方形を描画する。
        テキストプレーンの指定は _TXXLINE と同じ。
        ラインスタイルは、上位・下位バイトでそれぞれ偶数ライン目・奇数ライン目
        の水平方向のラインスタイルを指定する。

==============================================================================

$d8     _TXREV          テキスト画面の反転

引数    a1.l    パラメータバッファのアドレス
                 (0,a1) テキストプレーン(0～3)
                 (2,a1) X 座標
                 (4,a1) Y 〃
                 (6,a1) X 方向の長さ
                 (8,a1) Y 〃

        テキスト画面の指定範囲を反転する。
        ROM IOCS version 1.3 若しくは IOCS.X 常駐時、呼び出された時にテキスト
        同時アクセス機能が有効になっていれば、テキストプレーンの指定は無視され、
        プレーン 0 のデータを反転した結果を、同時アクセスに設定されている各プ
        レーンに描画する。

==============================================================================

$df     _TXRASCPY       テキスト画面のラスターコピー

引数    d1.hb   コピー元ラスタ番号
        d1.b    コピー先〃
        d2.w    コピーラスタ数
        d3.hb   ポインタ移動方向(0:下方向 -1:上方向)
        d3.b    テキストプレーン(bit 0～3 がプレーン 0～3 に対応する)

        テキスト画面の指定範囲をラスタコピーする。

==============================================================================

$f0     _OPMDRV         OPMDRV 制御

引数    d1.l    機能番号

        音源ドライバ OPMDRV.X で追加されたファンクションコールを呼び出す。
        引数/返値は機能番号によって異なる。

==============================================================================

$f1     _RSDRV          拡張 RS-232C 制御

引数    d2.hb   AUX 番号(0～5)
        d2.b    機能番号($30～$39)
                d2.b =  $30～$35        指定したポートで直接 IOCS $30～$35 の
                                        機能を実行する。
                        $36,$37         d1.l = バッファサイズ
                                        a1.l = バッファアドレス
                                        指定ポートの受信バッファを設定する。
                        $38,$39         未解析。

返値    d2.b = $36,$37 の時
                d1.w = 変更前のバッファサイズ
                a1.l = 変更前のバッファアドレス

        RSDRV.SYS で追加されたファンクションコールを呼び出す。
        詳細不明。

==============================================================================

$f2     _A_JOYGET       アナログジョイスティック制御

引数    d1.l    機能番号
        d2.w    モード(d1.l = 1 の時)
                d2.w =  0       デジタル
                        1       アナログ
                        -1      現在の設定を調べる
        d2.w    通信速度(d1.l = 2 の時)
                d2.w =  0       最高速度
                        1       最高速度の1/2
                        2       〃        1/3
                        3       〃        1/4
                        -1      現在の速度を調べる
        a1.l    バッファアドレス(d1.l = 0 の時のみ)

返値    d1.l =  0 の時、ステータス(-1 でエラー)
                1 の時、変更前のモード
                2 の時、変更前の速度

        アナログジョイスティックドライバ AJOY.X で追加されたファンクション
        コールを呼び出す。

        d1.l = 0 の時、a1.l で指定したバッファにアナログジョイスティックのデー
        タを読み込む。ジョイスティックデータの内容は以下の通り。

offset  size
0       1.w     スティック上下(0:上～255:下)
2       1.w     〃        左右(0:左～255:右)
4       1.w     スロットル
6       1.w     オプション
8       1.w     トリガ(押し下げ状態でビットが0になる)
                bit 11  A
                bit 10  B
                bit  9  A'
                bit  8  B'
                bit  7  A or A'(どちらかを押していれば0)
                bit  6  B or B'(        〃             )
                bit  5  C
                bit  4  D
                bit  3  E1
                bit  2  E2
                bit  1  スタート
                bit  0  セレクト

        d1.l = 1 の時、ジョイスティックのモードを変更する。

        d1.l = 2 の時、ジョイスティックの通信速度を変更する。最高速度に設定し
        た場合、ジョイスティックをリセットしない限り他の速度に変更出来なくなる。

==============================================================================

$f3     _MUSICDRV       MUSICDRV 制御

引数    d1.l    機能番号

        音源ドライバ MUSICDRV.X で追加されたファンクションコールを呼び出す。
        引数/返値は機能番号によって異なる。

==============================================================================

$f4     (未定義)        (ユーザ拡張) Mercury Driver 制御

引数    d1.l    機能番号

        Mercury-Unit 用ドライバ MercuryDriver.SYS で追加されたファンクションコ
        ールを呼び出す。

==============================================================================

$f5     _SCSIDRV        SCSI IOCS

引数    d1.l    機能番号

        SCSI IOCS で追加されたファンクションコールを呼び出す。
        引数/返値は機能番号によって異なる。

==============================================================================

$fd     _ABORTRST       アボートする為に環境を再設定する

        アボートするための環境を再設定する。OS で使用する。

==============================================================================

$fe     _IPLERR         再起動する

        起動時のエラーで再起動する時に使用する。通常は使用しない。

==============================================================================

$ff     _ABORTJOB       アボート

        アボートする。OS で使用する。

==============================================================================
